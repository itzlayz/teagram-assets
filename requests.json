{
    "requests_ex": [
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.auth.SendCodeRequest(\n        phone_number='some string here',\n        api_id=42,\n        api_hash='some string here',\n        settings=types.CodeSettings(\n            allow_flashcall=True,\n            current_number=True,\n            allow_app_hash=True,\n            allow_missed_call=True,\n            allow_firebase=True,\n            logout_tokens=[b'arbitrary\\x7f data \\xfa here'],\n            token='some string here',\n            app_sandbox=False\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.auth.SignUpRequest(\n        phone_number='some string here',\n        phone_code_hash='some string here',\n        first_name='some string here',\n        last_name='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.auth.SignInRequest(\n        phone_number='some string here',\n        phone_code_hash='some string here',\n        phone_code='some string here',\n        email_verification=types.EmailVerificationCode(\n            code='some string here'\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.auth.LogOutRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.auth.ResetAuthorizationsRequest())\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.auth.ExportAuthorizationRequest(\n        dc_id=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.auth.ImportAuthorizationRequest(\n        id=-12398745604826,\n        bytes=b'arbitrary\\x7f data \\xfa here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.auth.BindTempAuthKeyRequest(\n        perm_auth_key_id=-12398745604826,\n        nonce=-12398745604826,\n        expires_at=datetime.timedelta(minutes=5),\n        encrypted_message=b'arbitrary\\x7f data \\xfa here'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.RegisterDeviceRequest(\n        token_type=42,\n        token='some string here',\n        app_sandbox=False,\n        secret=b'arbitrary\\x7f data \\xfa here',\n        other_uids=[-12398745604826],\n        no_muted=True\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.UnregisterDeviceRequest(\n        token_type=42,\n        token='some string here',\n        other_uids=[-12398745604826]\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.UpdateNotifySettingsRequest(\n        peer='username',\n        settings=types.InputPeerNotifySettings(\n            show_previews=False,\n            mute_until=datetime.datetime(2018, 6, 25),\n            sound=types.NotificationSoundDefault(),\n            stories_muted=False,\n            stories_hide_sender=False,\n            stories_sound=types.NotificationSoundDefault()\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetNotifySettingsRequest(\n        peer='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.ResetNotifySettingsRequest())\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.UpdateProfileRequest(\n        first_name='some string here',\n        last_name='some string here',\n        about='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.UpdateStatusRequest(\n        offline=False\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetWallPapersRequest(\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.ReportPeerRequest(\n        peer='username',\n        reason=types.InputReportReasonSpam(),\n        message='Hello there!'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.users.GetUsersRequest(\n        id=['username']\n    ))\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.users.GetFullUserRequest(\n        id='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.GetContactIDsRequest(\n        hash=-12398745604826\n    ))\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.GetStatusesRequest())\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.GetContactsRequest(\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.ImportContactsRequest(\n        contacts=[types.InputPhoneContact(\n            client_id=random.randrange(-2**63, 2**63),\n            phone='some string here',\n            first_name='some string here',\n            last_name='some string here'\n        )]\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.DeleteContactsRequest(\n        id=['username']\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.DeleteByPhonesRequest(\n        phones=['some string here']\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.BlockRequest(\n        id='username',\n        my_stories_from=True\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.UnblockRequest(\n        id='username',\n        my_stories_from=True\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.GetBlockedRequest(\n        offset=42,\n        limit=100,\n        my_stories_from=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetMessagesRequest(\n        id=[42]\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetDialogsRequest(\n        offset_date=datetime.datetime(2018, 6, 25),\n        offset_id=42,\n        offset_peer='username',\n        limit=100,\n        hash=-12398745604826,\n        exclude_pinned=True,\n        folder_id=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetHistoryRequest(\n        peer='username',\n        offset_id=42,\n        offset_date=datetime.datetime(2018, 6, 25),\n        add_offset=0,\n        limit=100,\n        max_id=0,\n        min_id=0,\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SearchRequest(\n        peer='username',\n        q='some string here',\n        filter=types.InputMessagesFilterPhotos(),\n        min_date=datetime.datetime(2018, 6, 25),\n        max_date=datetime.datetime(2018, 6, 25),\n        offset_id=42,\n        add_offset=0,\n        limit=100,\n        max_id=0,\n        min_id=0,\n        hash=-12398745604826,\n        from_id='username',\n        top_msg_id=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ReadHistoryRequest(\n        peer='username',\n        max_id=0\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.DeleteHistoryRequest(\n        peer='username',\n        max_id=0,\n        just_clear=True,\n        revoke=True,\n        min_date=datetime.datetime(2018, 6, 25),\n        max_date=datetime.datetime(2018, 6, 25)\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.DeleteMessagesRequest(\n        id=[42],\n        revoke=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ReceivedMessagesRequest(\n        max_id=0\n    ))\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SetTypingRequest(\n        peer='username',\n        action=types.SendMessageTypingAction(),\n        top_msg_id=42\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SendMessageRequest(\n        peer='username',\n        message='Hello there!',\n        no_webpage=True,\n        noforwards=True,\n        update_stickersets_order=True,\n        invert_media=True,\n        reply_to=types.InputReplyToMessage(\n            reply_to_msg_id=42,\n            top_msg_id=42,\n            reply_to_peer_id='username',\n            quote_text='some string here',\n            quote_entities=[types.MessageEntityUnknown(\n                offset=42,\n                length=42\n            )]\n        ),\n        schedule_date=datetime.datetime(2018, 6, 25),\n        send_as='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SendMediaRequest(\n        peer='username',\n        media=types.InputMediaUploadedPhoto(\n            file=client.upload_file('/path/to/file.jpg'),\n            spoiler=True,\n            stickers=[types.InputDocument(\n                id=-12398745604826,\n                access_hash=-12398745604826,\n                file_reference=b'arbitrary\\x7f data \\xfa here'\n            )],\n            ttl_seconds=42\n        ),\n        message='Hello there!',\n        noforwards=True,\n        update_stickersets_order=True,\n        invert_media=True,\n        reply_to=types.InputReplyToMessage(\n            reply_to_msg_id=42,\n            top_msg_id=42,\n            reply_to_peer_id='username',\n            quote_text='some string here',\n            quote_entities=[types.MessageEntityUnknown(\n                offset=42,\n                length=42\n            )]\n        ),\n        schedule_date=datetime.datetime(2018, 6, 25),\n        send_as='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ForwardMessagesRequest(\n        from_peer='username',\n        id=[42],\n        to_peer='username',\n        with_my_score=True,\n        drop_author=True,\n        drop_media_captions=True,\n        noforwards=True,\n        top_msg_id=42,\n        schedule_date=datetime.datetime(2018, 6, 25),\n        send_as='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ReportSpamRequest(\n        peer='username'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetPeerSettingsRequest(\n        peer='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ReportRequest(\n        peer='username',\n        id=[42],\n        reason=types.InputReportReasonSpam(),\n        message='Hello there!'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetChatsRequest(\n        id=[-12398745604826]\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetFullChatRequest(\n        chat_id=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.EditChatTitleRequest(\n        chat_id=-12398745604826,\n        title='My awesome title'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.EditChatPhotoRequest(\n        chat_id=-12398745604826,\n        photo=client.upload_file('/path/to/photo.jpg')\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.AddChatUserRequest(\n        chat_id=-12398745604826,\n        user_id='username',\n        fwd_limit=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.DeleteChatUserRequest(\n        chat_id=-12398745604826,\n        user_id='username',\n        revoke_history=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.CreateChatRequest(\n        users=['username'],\n        title='My awesome title',\n        ttl_period=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.updates.GetStateRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.updates.GetDifferenceRequest(\n        pts=42,\n        date=datetime.datetime(2018, 6, 25),\n        qts=42,\n        pts_limit=42,\n        pts_total_limit=42,\n        qts_limit=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.photos.UpdateProfilePhotoRequest(\n        id=types.InputPhoto(\n            id=-12398745604826,\n            access_hash=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        ),\n        fallback=True,\n        bot='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.photos.UploadProfilePhotoRequest(\n        fallback=True,\n        bot='username',\n        file=client.upload_file('/path/to/file.jpg'),\n        video=client.upload_file('/path/to/file.mp4'),\n        video_start_ts=7.13,\n        video_emoji_markup=types.VideoSize(\n            type='some string here',\n            w=42,\n            h=42,\n            size=42,\n            video_start_ts=7.13\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.photos.DeletePhotosRequest(\n        id=[types.InputPhoto(\n            id=-12398745604826,\n            access_hash=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        )]\n    ))\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.upload.SaveFilePartRequest(\n        file_id=-12398745604826,\n        file_part=42,\n        bytes=b'arbitrary\\x7f data \\xfa here'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.upload.GetFileRequest(\n        location=types.InputFileLocation(\n            volume_id=-12398745604826,\n            local_id=42,\n            secret=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        ),\n        offset=-12398745604826,\n        limit=100,\n        precise=True,\n        cdn_supported=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.GetConfigRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.GetNearestDcRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.GetAppUpdateRequest(\n        source='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.GetInviteTextRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.photos.GetUserPhotosRequest(\n        user_id='username',\n        offset=42,\n        max_id=0,\n        limit=100\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetDhConfigRequest(\n        version=42,\n        random_length=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.RequestEncryptionRequest(\n        user_id='username',\n        g_a=b'arbitrary\\x7f data \\xfa here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.AcceptEncryptionRequest(\n        peer=types.InputEncryptedChat(\n            chat_id=478614198,\n            access_hash=-12398745604826\n        ),\n        g_b=b'arbitrary\\x7f data \\xfa here',\n        key_fingerprint=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.DiscardEncryptionRequest(\n        chat_id=478614198,\n        delete_history=True\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SetEncryptedTypingRequest(\n        peer=types.InputEncryptedChat(\n            chat_id=478614198,\n            access_hash=-12398745604826\n        ),\n        typing=False\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ReadEncryptedHistoryRequest(\n        peer=types.InputEncryptedChat(\n            chat_id=478614198,\n            access_hash=-12398745604826\n        ),\n        max_date=datetime.datetime(2018, 6, 25)\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SendEncryptedRequest(\n        peer=types.InputEncryptedChat(\n            chat_id=478614198,\n            access_hash=-12398745604826\n        ),\n        data=b'arbitrary\\x7f data \\xfa here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SendEncryptedFileRequest(\n        peer=types.InputEncryptedChat(\n            chat_id=478614198,\n            access_hash=-12398745604826\n        ),\n        data=b'arbitrary\\x7f data \\xfa here',\n        file=types.InputEncryptedFileUploaded(\n            id=-12398745604826,\n            parts=42,\n            md5_checksum='some string here',\n            key_fingerprint=42\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SendEncryptedServiceRequest(\n        peer=types.InputEncryptedChat(\n            chat_id=478614198,\n            access_hash=-12398745604826\n        ),\n        data=b'arbitrary\\x7f data \\xfa here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ReceivedQueueRequest(\n        max_qts=42\n    ))\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ReportEncryptedSpamRequest(\n        peer=types.InputEncryptedChat(\n            chat_id=478614198,\n            access_hash=-12398745604826\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.upload.SaveBigFilePartRequest(\n        file_id=-12398745604826,\n        file_part=42,\n        file_total_parts=42,\n        bytes=b'arbitrary\\x7f data \\xfa here'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.GetSupportRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ReadMessageContentsRequest(\n        id=[42]\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.CheckUsernameRequest(\n        username='some string here'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.UpdateUsernameRequest(\n        username='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.SearchRequest(\n        q='some string here',\n        limit=100\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetPrivacyRequest(\n        key=types.InputPrivacyKeyStatusTimestamp()\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.SetPrivacyRequest(\n        key=types.InputPrivacyKeyStatusTimestamp(),\n        rules=[types.InputPrivacyValueAllowContacts()]\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.DeleteAccountRequest(\n        reason='some string here',\n        password=types.InputCheckPasswordSRP(\n            srp_id=-12398745604826,\n            A=b'arbitrary\\x7f data \\xfa here',\n            M1=b'arbitrary\\x7f data \\xfa here'\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetAccountTTLRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.SetAccountTTLRequest(\n        ttl=types.AccountDaysTTL(\n            days=42\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.ResolveUsernameRequest(\n        username='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.SendChangePhoneCodeRequest(\n        phone_number='some string here',\n        settings=types.CodeSettings(\n            allow_flashcall=True,\n            current_number=True,\n            allow_app_hash=True,\n            allow_missed_call=True,\n            allow_firebase=True,\n            logout_tokens=[b'arbitrary\\x7f data \\xfa here'],\n            token='some string here',\n            app_sandbox=False\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.ChangePhoneRequest(\n        phone_number='some string here',\n        phone_code_hash='some string here',\n        phone_code='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetStickersRequest(\n        emoticon='some string here',\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetAllStickersRequest(\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.UpdateDeviceLockedRequest(\n        period=42\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.auth.ImportBotAuthorizationRequest(\n        flags=42,\n        api_id=42,\n        api_hash='some string here',\n        bot_auth_token='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetWebPagePreviewRequest(\n        message='Hello there!'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetAuthorizationsRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.ResetAuthorizationRequest(\n        hash=-12398745604826\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetPasswordRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetPasswordSettingsRequest(\n        password=types.InputCheckPasswordSRP(\n            srp_id=-12398745604826,\n            A=b'arbitrary\\x7f data \\xfa here',\n            M1=b'arbitrary\\x7f data \\xfa here'\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.UpdatePasswordSettingsRequest(\n        password=types.InputCheckPasswordSRP(\n            srp_id=-12398745604826,\n            A=b'arbitrary\\x7f data \\xfa here',\n            M1=b'arbitrary\\x7f data \\xfa here'\n        ),\n        new_settings=types.account.PasswordInputSettings(\n            new_algo=types.PasswordKdfAlgoUnknown(),\n            new_password_hash=b'arbitrary\\x7f data \\xfa here',\n            hint='some string here',\n            email='some string here',\n            new_secure_settings=types.SecureSecretSettings(\n                secure_algo=types.SecurePasswordKdfAlgoUnknown(),\n                secure_secret=b'arbitrary\\x7f data \\xfa here',\n                secure_secret_id=-12398745604826\n            )\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.auth.CheckPasswordRequest(\n        password=types.InputCheckPasswordSRP(\n            srp_id=-12398745604826,\n            A=b'arbitrary\\x7f data \\xfa here',\n            M1=b'arbitrary\\x7f data \\xfa here'\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.auth.RequestPasswordRecoveryRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.auth.RecoverPasswordRequest(\n        code='some string here',\n        new_settings=types.account.PasswordInputSettings(\n            new_algo=types.PasswordKdfAlgoUnknown(),\n            new_password_hash=b'arbitrary\\x7f data \\xfa here',\n            hint='some string here',\n            email='some string here',\n            new_secure_settings=types.SecureSecretSettings(\n                secure_algo=types.SecurePasswordKdfAlgoUnknown(),\n                secure_secret=b'arbitrary\\x7f data \\xfa here',\n                secure_secret_id=-12398745604826\n            )\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ExportChatInviteRequest(\n        peer='username',\n        legacy_revoke_permanent=True,\n        request_needed=True,\n        expire_date=datetime.datetime(2018, 6, 25),\n        usage_limit=42,\n        title='My awesome title'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.CheckChatInviteRequest(\n        hash='A4LmkR23G0IGxBE71zZfo1'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ImportChatInviteRequest(\n        hash='A4LmkR23G0IGxBE71zZfo1'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetStickerSetRequest(\n        stickerset=types.InputStickerSetID(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        hash=0\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.InstallStickerSetRequest(\n        stickerset=types.InputStickerSetID(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        archived=False\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.UninstallStickerSetRequest(\n        stickerset=types.InputStickerSetID(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.StartBotRequest(\n        bot='username',\n        peer='username',\n        start_param='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.GetAppChangelogRequest(\n        prev_app_version='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetMessagesViewsRequest(\n        peer='username',\n        id=[42],\n        increment=False\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.ReadHistoryRequest(\n        channel='username',\n        max_id=0\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.DeleteMessagesRequest(\n        channel='username',\n        id=[42]\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.ReportSpamRequest(\n        channel='username',\n        participant='username',\n        id=[42]\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.GetMessagesRequest(\n        channel='username',\n        id=[42]\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.GetParticipantsRequest(\n        channel='username',\n        filter=types.ChannelParticipantsRecent(),\n        offset=42,\n        limit=100,\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.GetParticipantRequest(\n        channel='username',\n        participant='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.GetChannelsRequest(\n        id=['username']\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.GetFullChannelRequest(\n        channel='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.CreateChannelRequest(\n        title='My awesome title',\n        about='some string here',\n        megagroup=True,\n        for_import=True,\n        forum=True,\n        geo_point=types.InputGeoPoint(\n            lat=7.13,\n            long=7.13,\n            accuracy_radius=42\n        ),\n        address='some string here',\n        ttl_period=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.EditAdminRequest(\n        channel='username',\n        user_id='username',\n        admin_rights=types.ChatAdminRights(\n            change_info=True,\n            post_messages=True,\n            edit_messages=True,\n            delete_messages=True,\n            ban_users=True,\n            invite_users=True,\n            pin_messages=True,\n            add_admins=True,\n            anonymous=True,\n            manage_call=True,\n            other=True,\n            manage_topics=True,\n            post_stories=True,\n            edit_stories=True,\n            delete_stories=True\n        ),\n        rank='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.EditTitleRequest(\n        channel='username',\n        title='My awesome title'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.EditPhotoRequest(\n        channel='username',\n        photo=client.upload_file('/path/to/photo.jpg')\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.CheckUsernameRequest(\n        channel='username',\n        username='some string here'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.UpdateUsernameRequest(\n        channel='username',\n        username='some string here'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.JoinChannelRequest(\n        channel='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.LeaveChannelRequest(\n        channel='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.InviteToChannelRequest(\n        channel='username',\n        users=['username']\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.DeleteChannelRequest(\n        channel='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.updates.GetChannelDifferenceRequest(\n        channel='username',\n        filter=types.ChannelMessagesFilter(\n            ranges=[types.MessageRange(\n                min_id=0,\n                max_id=0\n            )],\n            exclude_new_messages=True\n        ),\n        pts=42,\n        limit=100,\n        force=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.EditChatAdminRequest(\n        chat_id=-12398745604826,\n        user_id='username',\n        is_admin=False\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.MigrateChatRequest(\n        chat_id=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SearchGlobalRequest(\n        q='some string here',\n        filter=types.InputMessagesFilterPhotos(),\n        min_date=datetime.datetime(2018, 6, 25),\n        max_date=datetime.datetime(2018, 6, 25),\n        offset_rate=42,\n        offset_peer='username',\n        offset_id=42,\n        limit=100,\n        folder_id=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ReorderStickerSetsRequest(\n        order=[-12398745604826],\n        masks=True,\n        emojis=True\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetDocumentByHashRequest(\n        sha256=b'arbitrary\\x7f data \\xfa here',\n        size=-12398745604826,\n        mime_type='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetSavedGifsRequest(\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SaveGifRequest(\n        id=types.InputDocument(\n            id=-12398745604826,\n            access_hash=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        ),\n        unsave=False\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetInlineBotResultsRequest(\n        bot='username',\n        peer='username',\n        query='some string here',\n        offset='some string here',\n        geo_point=types.InputGeoPoint(\n            lat=7.13,\n            long=7.13,\n            accuracy_radius=42\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SetInlineBotResultsRequest(\n        query_id=-12398745604826,\n        results=[types.InputBotInlineResult(\n            id='some string here',\n            type='some string here',\n            send_message=types.InputBotInlineMessageMediaAuto(\n                message='Hello there!',\n                invert_media=True\n            ),\n            title='My awesome title',\n            description='some string here',\n            url='some string here',\n            thumb=types.InputWebDocument(\n                url='some string here',\n                size=42,\n                mime_type='some string here',\n                attributes=[types.DocumentAttributeImageSize(\n                    w=42,\n                    h=42\n                )]\n            ),\n            content=types.InputWebDocument(\n                url='some string here',\n                size=42,\n                mime_type='some string here',\n                attributes=[types.DocumentAttributeImageSize(\n                    w=42,\n                    h=42\n                )]\n            )\n        )],\n        cache_time=42,\n        gallery=True,\n        private=True,\n        next_offset='some string here',\n        switch_pm=types.InlineBotSwitchPM(\n            text='some string here',\n            start_param='some string here'\n        ),\n        switch_webview=types.InlineBotWebView(\n            text='some string here',\n            url='some string here'\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SendInlineBotResultRequest(\n        peer='username',\n        query_id=-12398745604826,\n        id='some string here',\n        hide_via=True,\n        reply_to=types.InputReplyToMessage(\n            reply_to_msg_id=42,\n            top_msg_id=42,\n            reply_to_peer_id='username',\n            quote_text='some string here',\n            quote_entities=[types.MessageEntityUnknown(\n                offset=42,\n                length=42\n            )]\n        ),\n        schedule_date=datetime.datetime(2018, 6, 25),\n        send_as='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.ExportMessageLinkRequest(\n        channel='username',\n        id=42,\n        thread=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.ToggleSignaturesRequest(\n        channel='username',\n        enabled=False\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.auth.ResendCodeRequest(\n        phone_number='some string here',\n        phone_code_hash='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.auth.CancelCodeRequest(\n        phone_number='some string here',\n        phone_code_hash='some string here'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetMessageEditDataRequest(\n        peer='username',\n        id=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.EditMessageRequest(\n        peer='username',\n        id=42,\n        no_webpage=True,\n        invert_media=True,\n        message='Hello there!',\n        media=types.InputMediaUploadedPhoto(\n            file=client.upload_file('/path/to/file.jpg'),\n            spoiler=True,\n            stickers=[types.InputDocument(\n                id=-12398745604826,\n                access_hash=-12398745604826,\n                file_reference=b'arbitrary\\x7f data \\xfa here'\n            )],\n            ttl_seconds=42\n        ),\n        schedule_date=datetime.datetime(2018, 6, 25)\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.EditInlineBotMessageRequest(\n        id=types.InputBotInlineMessageID(\n            dc_id=42,\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        no_webpage=True,\n        invert_media=True,\n        message='Hello there!',\n        media=types.InputMediaUploadedPhoto(\n            file=client.upload_file('/path/to/file.jpg'),\n            spoiler=True,\n            stickers=[types.InputDocument(\n                id=-12398745604826,\n                access_hash=-12398745604826,\n                file_reference=b'arbitrary\\x7f data \\xfa here'\n            )],\n            ttl_seconds=42\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetBotCallbackAnswerRequest(\n        peer='username',\n        msg_id=42,\n        game=True,\n        data=b'arbitrary\\x7f data \\xfa here',\n        password=types.InputCheckPasswordSRP(\n            srp_id=-12398745604826,\n            A=b'arbitrary\\x7f data \\xfa here',\n            M1=b'arbitrary\\x7f data \\xfa here'\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SetBotCallbackAnswerRequest(\n        query_id=-12398745604826,\n        cache_time=42,\n        alert=True,\n        message='Hello there!',\n        url='some string here'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.GetTopPeersRequest(\n        offset=42,\n        limit=100,\n        hash=-12398745604826,\n        correspondents=True,\n        bots_pm=True,\n        bots_inline=True,\n        phone_calls=True,\n        forward_users=True,\n        forward_chats=True,\n        groups=True,\n        channels=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.ResetTopPeerRatingRequest(\n        category=types.TopPeerCategoryBotsPM(),\n        peer='username'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetPeerDialogsRequest(\n        peers=['username']\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SaveDraftRequest(\n        peer='username',\n        message='Hello there!',\n        no_webpage=True,\n        invert_media=True,\n        reply_to=types.InputReplyToMessage(\n            reply_to_msg_id=42,\n            top_msg_id=42,\n            reply_to_peer_id='username',\n            quote_text='some string here',\n            quote_entities=[types.MessageEntityUnknown(\n                offset=42,\n                length=42\n            )]\n        ),\n        media=types.InputMediaUploadedPhoto(\n            file=client.upload_file('/path/to/file.jpg'),\n            spoiler=True,\n            stickers=[types.InputDocument(\n                id=-12398745604826,\n                access_hash=-12398745604826,\n                file_reference=b'arbitrary\\x7f data \\xfa here'\n            )],\n            ttl_seconds=42\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetAllDraftsRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetFeaturedStickersRequest(\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ReadFeaturedStickersRequest(\n        id=[-12398745604826]\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetRecentStickersRequest(\n        hash=-12398745604826,\n        attached=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SaveRecentStickerRequest(\n        id=types.InputDocument(\n            id=-12398745604826,\n            access_hash=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        ),\n        unsave=False,\n        attached=True\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ClearRecentStickersRequest(\n        attached=True\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetArchivedStickersRequest(\n        offset_id=-12398745604826,\n        limit=100,\n        masks=True,\n        emojis=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.SendConfirmPhoneCodeRequest(\n        hash='A4LmkR23G0IGxBE71zZfo1',\n        settings=types.CodeSettings(\n            allow_flashcall=True,\n            current_number=True,\n            allow_app_hash=True,\n            allow_missed_call=True,\n            allow_firebase=True,\n            logout_tokens=[b'arbitrary\\x7f data \\xfa here'],\n            token='some string here',\n            app_sandbox=False\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.ConfirmPhoneRequest(\n        phone_code_hash='some string here',\n        phone_code='some string here'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.GetAdminedPublicChannelsRequest(\n        by_location=True,\n        check_limit=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetMaskStickersRequest(\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetAttachedStickersRequest(\n        media=types.InputStickeredMediaPhoto(\n            id=types.InputPhoto(\n                id=-12398745604826,\n                access_hash=-12398745604826,\n                file_reference=b'arbitrary\\x7f data \\xfa here'\n            )\n        )\n    ))\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.auth.DropTempAuthKeysRequest(\n        except_auth_keys=[-12398745604826]\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SetGameScoreRequest(\n        peer='username',\n        id=42,\n        user_id='username',\n        score=42,\n        edit_message=True,\n        force=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SetInlineGameScoreRequest(\n        id=types.InputBotInlineMessageID(\n            dc_id=42,\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        user_id='username',\n        score=42,\n        edit_message=True,\n        force=True\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetGameHighScoresRequest(\n        peer='username',\n        id=42,\n        user_id='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetInlineGameHighScoresRequest(\n        id=types.InputBotInlineMessageID(\n            dc_id=42,\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        user_id='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetCommonChatsRequest(\n        user_id='username',\n        max_id=0,\n        limit=100\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.SetBotUpdatesStatusRequest(\n        pending_updates_count=42,\n        message='Hello there!'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetWebPageRequest(\n        url='some string here',\n        hash=0\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ToggleDialogPinRequest(\n        peer='username',\n        pinned=True\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ReorderPinnedDialogsRequest(\n        folder_id=42,\n        order=['username'],\n        force=True\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetPinnedDialogsRequest(\n        folder_id=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.bots.SendCustomRequestRequest(\n        custom_method='some string here',\n        params=types.DataJSON(\n            data='some string here'\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.bots.AnswerWebhookJSONQueryRequest(\n        query_id=-12398745604826,\n        data=types.DataJSON(\n            data='some string here'\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.upload.GetWebFileRequest(\n        location=types.InputWebFileLocation(\n            url='some string here',\n            access_hash=-12398745604826\n        ),\n        offset=42,\n        limit=100\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.payments.GetPaymentFormRequest(\n        invoice=types.InputInvoiceMessage(\n            peer='username',\n            msg_id=42\n        ),\n        theme_params=types.DataJSON(\n            data='some string here'\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.payments.GetPaymentReceiptRequest(\n        peer='username',\n        msg_id=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.payments.ValidateRequestedInfoRequest(\n        invoice=types.InputInvoiceMessage(\n            peer='username',\n            msg_id=42\n        ),\n        info=types.PaymentRequestedInfo(\n            name='some string here',\n            phone='some string here',\n            email='some string here',\n            shipping_address=types.PostAddress(\n                street_line1='some string here',\n                street_line2='some string here',\n                city='some string here',\n                state='some string here',\n                country_iso2='some string here',\n                post_code='some string here'\n            )\n        ),\n        save=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.payments.SendPaymentFormRequest(\n        form_id=-12398745604826,\n        invoice=types.InputInvoiceMessage(\n            peer='username',\n            msg_id=42\n        ),\n        credentials=types.InputPaymentCredentialsSaved(\n            id='some string here',\n            tmp_password=b'arbitrary\\x7f data \\xfa here'\n        ),\n        requested_info_id='some string here',\n        shipping_option_id='some string here',\n        tip_amount=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetTmpPasswordRequest(\n        password=types.InputCheckPasswordSRP(\n            srp_id=-12398745604826,\n            A=b'arbitrary\\x7f data \\xfa here',\n            M1=b'arbitrary\\x7f data \\xfa here'\n        ),\n        period=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.payments.GetSavedInfoRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.payments.ClearSavedInfoRequest(\n        credentials=True,\n        info=True\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SetBotShippingResultsRequest(\n        query_id=-12398745604826,\n        error='some string here',\n        shipping_options=[types.ShippingOption(\n            id='some string here',\n            title='My awesome title',\n            prices=[types.LabeledPrice(\n                label='some string here',\n                amount=-12398745604826\n            )]\n        )]\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SetBotPrecheckoutResultsRequest(\n        query_id=-12398745604826,\n        success=True,\n        error='some string here'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.stickers.CreateStickerSetRequest(\n        user_id='username',\n        title='My awesome title',\n        short_name='some string here',\n        stickers=[types.InputStickerSetItem(\n            document=types.InputDocument(\n                id=-12398745604826,\n                access_hash=-12398745604826,\n                file_reference=b'arbitrary\\x7f data \\xfa here'\n            ),\n            emoji='some string here',\n            mask_coords=types.MaskCoords(\n                n=42,\n                x=7.13,\n                y=7.13,\n                zoom=7.13\n            ),\n            keywords='some string here'\n        )],\n        masks=True,\n        animated=True,\n        videos=True,\n        emojis=True,\n        text_color=True,\n        thumb=types.InputDocument(\n            id=-12398745604826,\n            access_hash=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        ),\n        software='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.stickers.RemoveStickerFromSetRequest(\n        sticker=types.InputDocument(\n            id=-12398745604826,\n            access_hash=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.stickers.ChangeStickerPositionRequest(\n        sticker=types.InputDocument(\n            id=-12398745604826,\n            access_hash=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        ),\n        position=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.stickers.AddStickerToSetRequest(\n        stickerset=types.InputStickerSetID(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        sticker=types.InputStickerSetItem(\n            document=types.InputDocument(\n                id=-12398745604826,\n                access_hash=-12398745604826,\n                file_reference=b'arbitrary\\x7f data \\xfa here'\n            ),\n            emoji='some string here',\n            mask_coords=types.MaskCoords(\n                n=42,\n                x=7.13,\n                y=7.13,\n                zoom=7.13\n            ),\n            keywords='some string here'\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.UploadMediaRequest(\n        peer='username',\n        media=types.InputMediaUploadedPhoto(\n            file=client.upload_file('/path/to/file.jpg'),\n            spoiler=True,\n            stickers=[types.InputDocument(\n                id=-12398745604826,\n                access_hash=-12398745604826,\n                file_reference=b'arbitrary\\x7f data \\xfa here'\n            )],\n            ttl_seconds=42\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.GetCallConfigRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.RequestCallRequest(\n        user_id='username',\n        g_a_hash=b'arbitrary\\x7f data \\xfa here',\n        protocol=types.PhoneCallProtocol(\n            min_layer=42,\n            max_layer=42,\n            library_versions=['some string here'],\n            udp_p2p=True,\n            udp_reflector=True\n        ),\n        video=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.AcceptCallRequest(\n        peer=types.InputPhoneCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        g_b=b'arbitrary\\x7f data \\xfa here',\n        protocol=types.PhoneCallProtocol(\n            min_layer=42,\n            max_layer=42,\n            library_versions=['some string here'],\n            udp_p2p=True,\n            udp_reflector=True\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.ConfirmCallRequest(\n        peer=types.InputPhoneCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        g_a=b'arbitrary\\x7f data \\xfa here',\n        key_fingerprint=-12398745604826,\n        protocol=types.PhoneCallProtocol(\n            min_layer=42,\n            max_layer=42,\n            library_versions=['some string here'],\n            udp_p2p=True,\n            udp_reflector=True\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.ReceivedCallRequest(\n        peer=types.InputPhoneCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.DiscardCallRequest(\n        peer=types.InputPhoneCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        duration=42,\n        reason=types.PhoneCallDiscardReasonMissed(),\n        connection_id=-12398745604826,\n        video=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.SetCallRatingRequest(\n        peer=types.InputPhoneCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        rating=42,\n        comment='some string here',\n        user_initiative=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.SaveCallDebugRequest(\n        peer=types.InputPhoneCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        debug=types.DataJSON(\n            data='some string here'\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.upload.GetCdnFileRequest(\n        file_token=b'arbitrary\\x7f data \\xfa here',\n        offset=-12398745604826,\n        limit=100\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.upload.ReuploadCdnFileRequest(\n        file_token=b'arbitrary\\x7f data \\xfa here',\n        request_token=b'arbitrary\\x7f data \\xfa here'\n    ))\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.GetCdnConfigRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.langpack.GetLangPackRequest(\n        lang_pack='',\n        lang_code='en'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.langpack.GetStringsRequest(\n        lang_pack='',\n        lang_code='en',\n        keys=['some string here']\n    ))\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.langpack.GetDifferenceRequest(\n        lang_pack='',\n        lang_code='en',\n        from_version=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.langpack.GetLanguagesRequest(\n        lang_pack=''\n    ))\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.EditBannedRequest(\n        channel='username',\n        participant='username',\n        banned_rights=types.ChatBannedRights(\n            until_date=datetime.timedelta(days=14),\n            view_messages=None,\n            send_messages=None,\n            send_media=True,\n            send_stickers=True,\n            send_gifs=True,\n            send_games=True,\n            send_inline=True,\n            send_polls=True,\n            change_info=True,\n            invite_users=True,\n            pin_messages=True,\n            manage_topics=True,\n            send_photos=True,\n            send_videos=True,\n            send_roundvideos=True,\n            send_audios=True,\n            send_voices=True,\n            send_docs=True,\n            send_plain=True\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.GetAdminLogRequest(\n        channel='username',\n        q='some string here',\n        max_id=0,\n        min_id=0,\n        limit=100,\n        events_filter=types.ChannelAdminLogEventsFilter(\n            join=True,\n            leave=True,\n            invite=True,\n            ban=True,\n            unban=True,\n            kick=True,\n            unkick=True,\n            promote=True,\n            demote=True,\n            info=True,\n            settings=True,\n            pinned=True,\n            group_call=True,\n            invites=True,\n            send=True,\n            forums=True\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.upload.GetCdnFileHashesRequest(\n        file_token=b'arbitrary\\x7f data \\xfa here',\n        offset=-12398745604826\n    ))\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SendScreenshotNotificationRequest(\n        peer='username',\n        reply_to=types.InputReplyToMessage(\n            reply_to_msg_id=42,\n            top_msg_id=42,\n            reply_to_peer_id='username',\n            quote_text='some string here',\n            quote_entities=[types.MessageEntityUnknown(\n                offset=42,\n                length=42\n            )]\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.SetStickersRequest(\n        channel='username',\n        stickerset=types.InputStickerSetID(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetFavedStickersRequest(\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.FaveStickerRequest(\n        id=types.InputDocument(\n            id=-12398745604826,\n            access_hash=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        ),\n        unfave=False\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.ReadMessageContentsRequest(\n        channel='username',\n        id=[42]\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.ResetSavedRequest())\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetUnreadMentionsRequest(\n        peer='username',\n        offset_id=42,\n        add_offset=0,\n        limit=100,\n        max_id=0,\n        min_id=0,\n        top_msg_id=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.DeleteHistoryRequest(\n        channel='username',\n        max_id=0,\n        for_everyone=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.GetRecentMeUrlsRequest(\n        referer='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.TogglePreHistoryHiddenRequest(\n        channel='username',\n        enabled=False\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ReadMentionsRequest(\n        peer='username',\n        top_msg_id=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetRecentLocationsRequest(\n        peer='username',\n        limit=100,\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SendMultiMediaRequest(\n        peer='username',\n        multi_media=[types.InputSingleMedia(\n            media=types.InputMediaUploadedPhoto(\n                file=client.upload_file('/path/to/file.jpg'),\n                spoiler=True,\n                stickers=[types.InputDocument(\n                    id=-12398745604826,\n                    access_hash=-12398745604826,\n                    file_reference=b'arbitrary\\x7f data \\xfa here'\n                )],\n                ttl_seconds=42\n            ),\n            message='Hello there!'\n        )],\n        noforwards=True,\n        update_stickersets_order=True,\n        invert_media=True,\n        reply_to=types.InputReplyToMessage(\n            reply_to_msg_id=42,\n            top_msg_id=42,\n            reply_to_peer_id='username',\n            quote_text='some string here',\n            quote_entities=[types.MessageEntityUnknown(\n                offset=42,\n                length=42\n            )]\n        ),\n        schedule_date=datetime.datetime(2018, 6, 25),\n        send_as='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.UploadEncryptedFileRequest(\n        peer=types.InputEncryptedChat(\n            chat_id=478614198,\n            access_hash=-12398745604826\n        ),\n        file=types.InputEncryptedFileUploaded(\n            id=-12398745604826,\n            parts=42,\n            md5_checksum='some string here',\n            key_fingerprint=42\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetWebAuthorizationsRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.ResetWebAuthorizationRequest(\n        hash=-12398745604826\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.ResetWebAuthorizationsRequest())\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SearchStickerSetsRequest(\n        q='some string here',\n        hash=-12398745604826,\n        exclude_featured=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.upload.GetFileHashesRequest(\n        location=types.InputFileLocation(\n            volume_id=-12398745604826,\n            local_id=42,\n            secret=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        ),\n        offset=-12398745604826\n    ))\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.GetTermsOfServiceUpdateRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.AcceptTermsOfServiceRequest(\n        id=types.DataJSON(\n            data='some string here'\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetAllSecureValuesRequest())\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetSecureValueRequest(\n        types=[types.SecureValueTypePersonalDetails()]\n    ))\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.SaveSecureValueRequest(\n        value=types.InputSecureValue(\n            type=types.SecureValueTypePersonalDetails(),\n            data=types.SecureData(\n                data=b'arbitrary\\x7f data \\xfa here',\n                data_hash=b'arbitrary\\x7f data \\xfa here',\n                secret=b'arbitrary\\x7f data \\xfa here'\n            ),\n            front_side=types.InputSecureFileUploaded(\n                id=-12398745604826,\n                parts=42,\n                md5_checksum='some string here',\n                file_hash=b'arbitrary\\x7f data \\xfa here',\n                secret=b'arbitrary\\x7f data \\xfa here'\n            ),\n            reverse_side=types.InputSecureFileUploaded(\n                id=-12398745604826,\n                parts=42,\n                md5_checksum='some string here',\n                file_hash=b'arbitrary\\x7f data \\xfa here',\n                secret=b'arbitrary\\x7f data \\xfa here'\n            ),\n            selfie=types.InputSecureFileUploaded(\n                id=-12398745604826,\n                parts=42,\n                md5_checksum='some string here',\n                file_hash=b'arbitrary\\x7f data \\xfa here',\n                secret=b'arbitrary\\x7f data \\xfa here'\n            ),\n            translation=[types.InputSecureFileUploaded(\n                id=-12398745604826,\n                parts=42,\n                md5_checksum='some string here',\n                file_hash=b'arbitrary\\x7f data \\xfa here',\n                secret=b'arbitrary\\x7f data \\xfa here'\n            )],\n            files=[types.InputSecureFileUploaded(\n                id=-12398745604826,\n                parts=42,\n                md5_checksum='some string here',\n                file_hash=b'arbitrary\\x7f data \\xfa here',\n                secret=b'arbitrary\\x7f data \\xfa here'\n            )],\n            plain_data=types.SecurePlainPhone(\n                phone='some string here'\n            )\n        ),\n        secure_secret_id=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.DeleteSecureValueRequest(\n        types=[types.SecureValueTypePersonalDetails()]\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.users.SetSecureValueErrorsRequest(\n        id='username',\n        errors=[types.SecureValueErrorData(\n            type=types.SecureValueTypePersonalDetails(),\n            data_hash=b'arbitrary\\x7f data \\xfa here',\n            field='some string here',\n            text='some string here'\n        )]\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetAuthorizationFormRequest(\n        bot_id=-12398745604826,\n        scope='some string here',\n        public_key='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.AcceptAuthorizationRequest(\n        bot_id=-12398745604826,\n        scope='some string here',\n        public_key='some string here',\n        value_hashes=[types.SecureValueHash(\n            type=types.SecureValueTypePersonalDetails(),\n            hash=b'arbitrary\\x7f data \\xfa here'\n        )],\n        credentials=types.SecureCredentialsEncrypted(\n            data=b'arbitrary\\x7f data \\xfa here',\n            hash=b'arbitrary\\x7f data \\xfa here',\n            secret=b'arbitrary\\x7f data \\xfa here'\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.SendVerifyPhoneCodeRequest(\n        phone_number='some string here',\n        settings=types.CodeSettings(\n            allow_flashcall=True,\n            current_number=True,\n            allow_app_hash=True,\n            allow_missed_call=True,\n            allow_firebase=True,\n            logout_tokens=[b'arbitrary\\x7f data \\xfa here'],\n            token='some string here',\n            app_sandbox=False\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.VerifyPhoneRequest(\n        phone_number='some string here',\n        phone_code_hash='some string here',\n        phone_code='some string here'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.SendVerifyEmailCodeRequest(\n        purpose=types.EmailVerifyPurposeLoginSetup(\n            phone_number='some string here',\n            phone_code_hash='some string here'\n        ),\n        email='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.VerifyEmailRequest(\n        purpose=types.EmailVerifyPurposeLoginSetup(\n            phone_number='some string here',\n            phone_code_hash='some string here'\n        ),\n        verification=types.EmailVerificationCode(\n            code='some string here'\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.GetDeepLinkInfoRequest(\n        path='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.GetSavedRequest())\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.GetLeftChannelsRequest(\n        offset=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.InitTakeoutSessionRequest(\n        contacts=True,\n        message_users=True,\n        message_chats=True,\n        message_megagroups=True,\n        message_channels=True,\n        files=True,\n        file_max_size=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.FinishTakeoutSessionRequest(\n        success=True\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetSplitRangesRequest())\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.MarkDialogUnreadRequest(\n        peer='username',\n        unread=True\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetDialogUnreadMarksRequest())\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.ToggleTopPeersRequest(\n        enabled=False\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ClearAllDraftsRequest())\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.GetAppConfigRequest(\n        hash=0\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.SaveAppLogRequest(\n        events=[types.InputAppEvent(\n            time=7.13,\n            type='some string here',\n            peer=-12398745604826,\n            data=types.JsonNull()\n        )]\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.GetPassportConfigRequest(\n        hash=0\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.langpack.GetLanguageRequest(\n        lang_pack='',\n        lang_code='en'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.UpdatePinnedMessageRequest(\n        peer='username',\n        id=42,\n        unpin=True,\n        pm_oneside=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.ConfirmPasswordEmailRequest(\n        code='some string here'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.ResendPasswordEmailRequest())\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.CancelPasswordEmailRequest())\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.GetSupportNameRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.GetUserInfoRequest(\n        user_id='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.EditUserInfoRequest(\n        user_id='username',\n        message='Hello there!',\n        entities=[types.MessageEntityUnknown(\n            offset=42,\n            length=42\n        )]\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetContactSignUpNotificationRequest())\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.SetContactSignUpNotificationRequest(\n        silent=False\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetNotifyExceptionsRequest(\n        compare_sound=True,\n        compare_stories=True,\n        peer='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SendVoteRequest(\n        peer='username',\n        msg_id=42,\n        options=[b'arbitrary\\x7f data \\xfa here']\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetPollResultsRequest(\n        peer='username',\n        msg_id=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetOnlinesRequest(\n        peer='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.EditChatAboutRequest(\n        peer='username',\n        about='some string here'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.EditChatDefaultBannedRightsRequest(\n        peer='username',\n        banned_rights=types.ChatBannedRights(\n            until_date=datetime.timedelta(days=14),\n            view_messages=None,\n            send_messages=None,\n            send_media=True,\n            send_stickers=True,\n            send_gifs=True,\n            send_games=True,\n            send_inline=True,\n            send_polls=True,\n            change_info=True,\n            invite_users=True,\n            pin_messages=True,\n            manage_topics=True,\n            send_photos=True,\n            send_videos=True,\n            send_roundvideos=True,\n            send_audios=True,\n            send_voices=True,\n            send_docs=True,\n            send_plain=True\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetWallPaperRequest(\n        wallpaper=types.InputWallPaper(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.UploadWallPaperRequest(\n        file=client.upload_file('/path/to/file.jpg'),\n        mime_type='some string here',\n        settings=types.WallPaperSettings(\n            blur=True,\n            motion=True,\n            background_color=42,\n            second_background_color=42,\n            third_background_color=42,\n            fourth_background_color=42,\n            intensity=42,\n            rotation=42\n        ),\n        for_chat=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.SaveWallPaperRequest(\n        wallpaper=types.InputWallPaper(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        unsave=False,\n        settings=types.WallPaperSettings(\n            blur=True,\n            motion=True,\n            background_color=42,\n            second_background_color=42,\n            third_background_color=42,\n            fourth_background_color=42,\n            intensity=42,\n            rotation=42\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.InstallWallPaperRequest(\n        wallpaper=types.InputWallPaper(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        settings=types.WallPaperSettings(\n            blur=True,\n            motion=True,\n            background_color=42,\n            second_background_color=42,\n            third_background_color=42,\n            fourth_background_color=42,\n            intensity=42,\n            rotation=42\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.ResetWallPapersRequest())\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetAutoDownloadSettingsRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.SaveAutoDownloadSettingsRequest(\n        settings=types.AutoDownloadSettings(\n            photo_size_max=42,\n            video_size_max=-12398745604826,\n            file_size_max=-12398745604826,\n            video_upload_maxbitrate=42,\n            small_queue_active_operations_max=42,\n            large_queue_active_operations_max=42,\n            disabled=True,\n            video_preload_large=True,\n            audio_preload_next=True,\n            phonecalls_less_data=True,\n            stories_preload=True\n        ),\n        low=True,\n        high=True\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetEmojiKeywordsRequest(\n        lang_code='en'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetEmojiKeywordsDifferenceRequest(\n        lang_code='en',\n        from_version=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetEmojiKeywordsLanguagesRequest(\n        lang_codes=['some string here']\n    ))\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetEmojiURLRequest(\n        lang_code='en'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.folders.EditPeerFoldersRequest(\n        folder_peers=[types.InputFolderPeer(\n            peer='username',\n            folder_id=42\n        )]\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetSearchCountersRequest(\n        peer='username',\n        filters=[types.InputMessagesFilterPhotos()],\n        top_msg_id=42\n    ))\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.GetGroupsForDiscussionRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.SetDiscussionGroupRequest(\n        broadcast='username',\n        group='username'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.RequestUrlAuthRequest(\n        peer='username',\n        msg_id=42,\n        button_id=42,\n        url='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.AcceptUrlAuthRequest(\n        write_allowed=True,\n        peer='username',\n        msg_id=42,\n        button_id=42,\n        url='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.HidePeerSettingsBarRequest(\n        peer='username'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.AddContactRequest(\n        id='username',\n        first_name='some string here',\n        last_name='some string here',\n        phone='some string here',\n        add_phone_privacy_exception=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.AcceptContactRequest(\n        id='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.EditCreatorRequest(\n        channel='username',\n        user_id='username',\n        password=types.InputCheckPasswordSRP(\n            srp_id=-12398745604826,\n            A=b'arbitrary\\x7f data \\xfa here',\n            M1=b'arbitrary\\x7f data \\xfa here'\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.GetLocatedRequest(\n        geo_point=types.InputGeoPoint(\n            lat=7.13,\n            long=7.13,\n            accuracy_radius=42\n        ),\n        self_expires=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.EditLocationRequest(\n        channel='username',\n        geo_point=types.InputGeoPoint(\n            lat=7.13,\n            long=7.13,\n            accuracy_radius=42\n        ),\n        address='some string here'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.ToggleSlowModeRequest(\n        channel='username',\n        seconds=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetScheduledHistoryRequest(\n        peer='username',\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetScheduledMessagesRequest(\n        peer='username',\n        id=[42]\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SendScheduledMessagesRequest(\n        peer='username',\n        id=[42]\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.DeleteScheduledMessagesRequest(\n        peer='username',\n        id=[42]\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.UploadThemeRequest(\n        file=client.upload_file('/path/to/file.jpg'),\n        file_name='some string here',\n        mime_type='some string here',\n        thumb=client.upload_file('/path/to/file.jpg')\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.CreateThemeRequest(\n        slug='some string here',\n        title='My awesome title',\n        document=types.InputDocument(\n            id=-12398745604826,\n            access_hash=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        ),\n        settings=[types.InputThemeSettings(\n            base_theme=types.BaseThemeClassic(),\n            accent_color=42,\n            message_colors_animated=True,\n            outbox_accent_color=42,\n            message_colors=[42],\n            wallpaper=types.InputWallPaper(\n                id=-12398745604826,\n                access_hash=-12398745604826\n            ),\n            wallpaper_settings=types.WallPaperSettings(\n                blur=True,\n                motion=True,\n                background_color=42,\n                second_background_color=42,\n                third_background_color=42,\n                fourth_background_color=42,\n                intensity=42,\n                rotation=42\n            )\n        )]\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.UpdateThemeRequest(\n        format='some string here',\n        theme=types.InputTheme(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        slug='some string here',\n        title='My awesome title',\n        document=types.InputDocument(\n            id=-12398745604826,\n            access_hash=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        ),\n        settings=[types.InputThemeSettings(\n            base_theme=types.BaseThemeClassic(),\n            accent_color=42,\n            message_colors_animated=True,\n            outbox_accent_color=42,\n            message_colors=[42],\n            wallpaper=types.InputWallPaper(\n                id=-12398745604826,\n                access_hash=-12398745604826\n            ),\n            wallpaper_settings=types.WallPaperSettings(\n                blur=True,\n                motion=True,\n                background_color=42,\n                second_background_color=42,\n                third_background_color=42,\n                fourth_background_color=42,\n                intensity=42,\n                rotation=42\n            )\n        )]\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.SaveThemeRequest(\n        theme=types.InputTheme(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        unsave=False\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.InstallThemeRequest(\n        dark=True,\n        theme=types.InputTheme(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        format='some string here',\n        base_theme=types.BaseThemeClassic()\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetThemeRequest(\n        format='some string here',\n        theme=types.InputTheme(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetThemesRequest(\n        format='some string here',\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.auth.ExportLoginTokenRequest(\n        api_id=42,\n        api_hash='some string here',\n        except_ids=[-12398745604826]\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.auth.ImportLoginTokenRequest(\n        token=b'arbitrary\\x7f data \\xfa here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.auth.AcceptLoginTokenRequest(\n        token=b'arbitrary\\x7f data \\xfa here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.SetContentSettingsRequest(\n        sensitive_enabled=True\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetContentSettingsRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.GetInactiveChannelsRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetMultiWallPapersRequest(\n        wallpapers=[types.InputWallPaper(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        )]\n    ))\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetPollVotesRequest(\n        peer='username',\n        id=42,\n        limit=100,\n        option=b'arbitrary\\x7f data \\xfa here',\n        offset='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ToggleStickerSetsRequest(\n        stickersets=[types.InputStickerSetID(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        )],\n        uninstall=True,\n        archive=True,\n        unarchive=True\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.payments.GetBankCardDataRequest(\n        number='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetDialogFiltersRequest())\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetSuggestedDialogFiltersRequest())\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.UpdateDialogFilterRequest(\n        id=42,\n        filter=types.DialogFilter(\n            id=42,\n            title='My awesome title',\n            pinned_peers=['username'],\n            include_peers=['username'],\n            exclude_peers=['username'],\n            contacts=True,\n            non_contacts=True,\n            groups=True,\n            broadcasts=True,\n            bots=True,\n            exclude_muted=True,\n            exclude_read=True,\n            exclude_archived=True,\n            emoticon='some string here'\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.UpdateDialogFiltersOrderRequest(\n        order=[42]\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.stats.GetBroadcastStatsRequest(\n        channel='username',\n        dark=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.stats.LoadAsyncGraphRequest(\n        token='some string here',\n        x=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.stickers.SetStickerSetThumbRequest(\n        stickerset=types.InputStickerSetID(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        thumb=types.InputDocument(\n            id=-12398745604826,\n            access_hash=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        ),\n        thumb_document_id=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.bots.SetBotCommandsRequest(\n        scope=types.BotCommandScopeDefault(),\n        lang_code='en',\n        commands=[types.BotCommand(\n            command='some string here',\n            description='some string here'\n        )]\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetOldFeaturedStickersRequest(\n        offset=42,\n        limit=100,\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.GetPromoDataRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.HidePromoDataRequest(\n        peer='username'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.SendSignalingDataRequest(\n        peer=types.InputPhoneCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        data=b'arbitrary\\x7f data \\xfa here'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.stats.GetMegagroupStatsRequest(\n        channel='username',\n        dark=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetGlobalPrivacySettingsRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.SetGlobalPrivacySettingsRequest(\n        settings=types.GlobalPrivacySettings(\n            archive_and_mute_new_noncontact_peers=True,\n            keep_archived_unmuted=True,\n            keep_archived_folders=True\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.DismissSuggestionRequest(\n        peer='username',\n        suggestion='some string here'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.GetCountriesListRequest(\n        lang_code='en',\n        hash=0\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetRepliesRequest(\n        peer='username',\n        msg_id=42,\n        offset_id=42,\n        offset_date=datetime.datetime(2018, 6, 25),\n        add_offset=0,\n        limit=100,\n        max_id=0,\n        min_id=0,\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetDiscussionMessageRequest(\n        peer='username',\n        msg_id=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ReadDiscussionRequest(\n        peer='username',\n        msg_id=42,\n        read_max_id=42\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.BlockFromRepliesRequest(\n        msg_id=42,\n        delete_message=True,\n        delete_history=True,\n        report_spam=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.stats.GetMessagePublicForwardsRequest(\n        channel='username',\n        msg_id=42,\n        offset_rate=42,\n        offset_peer='username',\n        offset_id=42,\n        limit=100\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.stats.GetMessageStatsRequest(\n        channel='username',\n        msg_id=42,\n        dark=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.UnpinAllMessagesRequest(\n        peer='username',\n        top_msg_id=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.CreateGroupCallRequest(\n        peer='username',\n        rtmp_stream=True,\n        title='My awesome title',\n        schedule_date=datetime.datetime(2018, 6, 25)\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.JoinGroupCallRequest(\n        call=types.InputGroupCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        join_as='username',\n        params=types.DataJSON(\n            data='some string here'\n        ),\n        muted=True,\n        video_stopped=True,\n        invite_hash='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.LeaveGroupCallRequest(\n        call=types.InputGroupCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        source=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.InviteToGroupCallRequest(\n        call=types.InputGroupCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        users=['username']\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.DiscardGroupCallRequest(\n        call=types.InputGroupCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.ToggleGroupCallSettingsRequest(\n        call=types.InputGroupCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        reset_invite_hash=True,\n        join_muted=False\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.GetGroupCallRequest(\n        call=types.InputGroupCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        limit=100\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.GetGroupParticipantsRequest(\n        call=types.InputGroupCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        ids=['username'],\n        sources=[42],\n        offset='some string here',\n        limit=100\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.CheckGroupCallRequest(\n        call=types.InputGroupCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        sources=[42]\n    ))\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.DeleteChatRequest(\n        chat_id=-12398745604826\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.DeletePhoneCallHistoryRequest(\n        revoke=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.CheckHistoryImportRequest(\n        import_head='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.InitHistoryImportRequest(\n        peer='username',\n        file=client.upload_file('/path/to/file.jpg'),\n        media_count=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.UploadImportedMediaRequest(\n        peer='username',\n        import_id=-12398745604826,\n        file_name='some string here',\n        media=types.InputMediaUploadedPhoto(\n            file=client.upload_file('/path/to/file.jpg'),\n            spoiler=True,\n            stickers=[types.InputDocument(\n                id=-12398745604826,\n                access_hash=-12398745604826,\n                file_reference=b'arbitrary\\x7f data \\xfa here'\n            )],\n            ttl_seconds=42\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.StartHistoryImportRequest(\n        peer='username',\n        import_id=-12398745604826\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetExportedChatInvitesRequest(\n        peer='username',\n        admin_id='username',\n        limit=100,\n        revoked=True,\n        offset_date=datetime.datetime(2018, 6, 25),\n        offset_link='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetExportedChatInviteRequest(\n        peer='username',\n        link='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.EditExportedChatInviteRequest(\n        peer='username',\n        link='some string here',\n        revoked=True,\n        expire_date=datetime.datetime(2018, 6, 25),\n        usage_limit=42,\n        request_needed=False,\n        title='My awesome title'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.DeleteRevokedExportedChatInvitesRequest(\n        peer='username',\n        admin_id='username'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.DeleteExportedChatInviteRequest(\n        peer='username',\n        link='some string here'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetAdminsWithInvitesRequest(\n        peer='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetChatInviteImportersRequest(\n        peer='username',\n        offset_date=datetime.datetime(2018, 6, 25),\n        offset_user='username',\n        limit=100,\n        requested=True,\n        link='some string here',\n        q='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SetHistoryTTLRequest(\n        peer='username',\n        period=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.ReportProfilePhotoRequest(\n        peer='username',\n        photo_id=types.InputPhoto(\n            id=-12398745604826,\n            access_hash=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        ),\n        reason=types.InputReportReasonSpam(),\n        message='Hello there!'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.ConvertToGigagroupRequest(\n        channel='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.CheckHistoryImportPeerRequest(\n        peer='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.ToggleGroupCallRecordRequest(\n        call=types.InputGroupCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        start=True,\n        video=True,\n        title='My awesome title',\n        video_portrait=False\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.EditGroupCallParticipantRequest(\n        call=types.InputGroupCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        participant='username',\n        muted=False,\n        volume=42,\n        raise_hand=False,\n        video_stopped=False,\n        video_paused=False,\n        presentation_paused=False\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.EditGroupCallTitleRequest(\n        call=types.InputGroupCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        title='My awesome title'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.GetGroupCallJoinAsRequest(\n        peer='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.ExportGroupCallInviteRequest(\n        call=types.InputGroupCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        can_self_unmute=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.ToggleGroupCallStartSubscriptionRequest(\n        call=types.InputGroupCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        subscribed=False\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.StartScheduledGroupCallRequest(\n        call=types.InputGroupCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.SaveDefaultGroupCallJoinAsRequest(\n        peer='username',\n        join_as='username'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.JoinGroupCallPresentationRequest(\n        call=types.InputGroupCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        params=types.DataJSON(\n            data='some string here'\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.LeaveGroupCallPresentationRequest(\n        call=types.InputGroupCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.stickers.CheckShortNameRequest(\n        short_name='some string here'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.stickers.SuggestShortNameRequest(\n        title='My awesome title'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.bots.ResetBotCommandsRequest(\n        scope=types.BotCommandScopeDefault(),\n        lang_code='en'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.bots.GetBotCommandsRequest(\n        scope=types.BotCommandScopeDefault(),\n        lang_code='en'\n    ))\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.ResetPasswordRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.DeclinePasswordResetRequest())\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.auth.CheckRecoveryPasswordRequest(\n        code='some string here'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetChatThemesRequest(\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SetChatThemeRequest(\n        peer='username',\n        emoticon='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.ViewSponsoredMessageRequest(\n        channel='username'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.GetSponsoredMessagesRequest(\n        channel='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetMessageReadParticipantsRequest(\n        peer='username',\n        msg_id=42\n    ))\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetSearchResultsCalendarRequest(\n        peer='username',\n        filter=types.InputMessagesFilterPhotos(),\n        offset_id=42,\n        offset_date=datetime.datetime(2018, 6, 25)\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetSearchResultsPositionsRequest(\n        peer='username',\n        filter=types.InputMessagesFilterPhotos(),\n        offset_id=42,\n        limit=100\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.HideChatJoinRequestRequest(\n        peer='username',\n        user_id='username',\n        approved=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.HideAllChatJoinRequestsRequest(\n        peer='username',\n        approved=True,\n        link='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ToggleNoForwardsRequest(\n        peer='username',\n        enabled=False\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SaveDefaultSendAsRequest(\n        peer='username',\n        send_as='username'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.GetSendAsRequest(\n        peer='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.SetAuthorizationTTLRequest(\n        authorization_ttl_days=42\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.ChangeAuthorizationSettingsRequest(\n        hash=-12398745604826,\n        confirmed=True,\n        encrypted_requests_disabled=False,\n        call_requests_disabled=False\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.DeleteParticipantHistoryRequest(\n        channel='username',\n        participant='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SendReactionRequest(\n        peer='username',\n        msg_id=42,\n        big=True,\n        add_to_recent=True,\n        reaction=[types.ReactionEmoji(\n            emoticon='some string here'\n        )]\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetMessagesReactionsRequest(\n        peer='username',\n        id=[42]\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetMessageReactionsListRequest(\n        peer='username',\n        id=42,\n        limit=100,\n        reaction=types.ReactionEmoji(\n            emoticon='some string here'\n        ),\n        offset='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SetChatAvailableReactionsRequest(\n        peer='username',\n        available_reactions=types.ChatReactionsNone()\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetAvailableReactionsRequest(\n        hash=0\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SetDefaultReactionRequest(\n        reaction=types.ReactionEmoji(\n            emoticon='some string here'\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.TranslateTextRequest(\n        to_lang='some string here',\n        peer='username',\n        id=[42],\n        text=[types.TextWithEntities(\n            text='some string here',\n            entities=[types.MessageEntityUnknown(\n                offset=42,\n                length=42\n            )]\n        )]\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetUnreadReactionsRequest(\n        peer='username',\n        offset_id=42,\n        add_offset=0,\n        limit=100,\n        max_id=0,\n        min_id=0,\n        top_msg_id=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ReadReactionsRequest(\n        peer='username',\n        top_msg_id=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.ResolvePhoneRequest(\n        phone='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.GetGroupCallStreamChannelsRequest(\n        call=types.InputGroupCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.GetGroupCallStreamRtmpUrlRequest(\n        peer='username',\n        revoke=False\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SearchSentMediaRequest(\n        q='some string here',\n        filter=types.InputMessagesFilterPhotos(),\n        limit=100\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetAttachMenuBotsRequest(\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetAttachMenuBotRequest(\n        bot='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ToggleBotInAttachMenuRequest(\n        bot='username',\n        enabled=False,\n        write_allowed=True\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.RequestWebViewRequest(\n        peer='username',\n        bot='username',\n        platform='some string here',\n        from_bot_menu=True,\n        url='some string here',\n        start_param='some string here',\n        theme_params=types.DataJSON(\n            data='some string here'\n        ),\n        reply_to=types.InputReplyToMessage(\n            reply_to_msg_id=42,\n            top_msg_id=42,\n            reply_to_peer_id='username',\n            quote_text='some string here',\n            quote_entities=[types.MessageEntityUnknown(\n                offset=42,\n                length=42\n            )]\n        ),\n        send_as='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ProlongWebViewRequest(\n        peer='username',\n        bot='username',\n        query_id=-12398745604826,\n        reply_to=types.InputReplyToMessage(\n            reply_to_msg_id=42,\n            top_msg_id=42,\n            reply_to_peer_id='username',\n            quote_text='some string here',\n            quote_entities=[types.MessageEntityUnknown(\n                offset=42,\n                length=42\n            )]\n        ),\n        send_as='username'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.RequestSimpleWebViewRequest(\n        bot='username',\n        platform='some string here',\n        from_switch_webview=True,\n        from_side_menu=True,\n        url='some string here',\n        start_param='some string here',\n        theme_params=types.DataJSON(\n            data='some string here'\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SendWebViewResultMessageRequest(\n        bot_query_id='some string here',\n        result=types.InputBotInlineResult(\n            id='some string here',\n            type='some string here',\n            send_message=types.InputBotInlineMessageMediaAuto(\n                message='Hello there!',\n                invert_media=True\n            ),\n            title='My awesome title',\n            description='some string here',\n            url='some string here',\n            thumb=types.InputWebDocument(\n                url='some string here',\n                size=42,\n                mime_type='some string here',\n                attributes=[types.DocumentAttributeImageSize(\n                    w=42,\n                    h=42\n                )]\n            ),\n            content=types.InputWebDocument(\n                url='some string here',\n                size=42,\n                mime_type='some string here',\n                attributes=[types.DocumentAttributeImageSize(\n                    w=42,\n                    h=42\n                )]\n            )\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SendWebViewDataRequest(\n        bot='username',\n        button_text='some string here',\n        data='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.bots.SetBotMenuButtonRequest(\n        user_id='username',\n        button=types.BotMenuButtonDefault()\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.bots.GetBotMenuButtonRequest(\n        user_id='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetSavedRingtonesRequest(\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.SaveRingtoneRequest(\n        id=types.InputDocument(\n            id=-12398745604826,\n            access_hash=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        ),\n        unsave=False\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.UploadRingtoneRequest(\n        file=client.upload_file('/path/to/file.jpg'),\n        file_name='some string here',\n        mime_type='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.bots.SetBotBroadcastDefaultAdminRightsRequest(\n        admin_rights=types.ChatAdminRights(\n            change_info=True,\n            post_messages=True,\n            edit_messages=True,\n            delete_messages=True,\n            ban_users=True,\n            invite_users=True,\n            pin_messages=True,\n            add_admins=True,\n            anonymous=True,\n            manage_call=True,\n            other=True,\n            manage_topics=True,\n            post_stories=True,\n            edit_stories=True,\n            delete_stories=True\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.bots.SetBotGroupDefaultAdminRightsRequest(\n        admin_rights=types.ChatAdminRights(\n            change_info=True,\n            post_messages=True,\n            edit_messages=True,\n            delete_messages=True,\n            ban_users=True,\n            invite_users=True,\n            pin_messages=True,\n            add_admins=True,\n            anonymous=True,\n            manage_call=True,\n            other=True,\n            manage_topics=True,\n            post_stories=True,\n            edit_stories=True,\n            delete_stories=True\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.phone.SaveCallLogRequest(\n        peer=types.InputPhoneCall(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        file=client.upload_file('/path/to/file.jpg')\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.ToggleJoinToSendRequest(\n        channel='username',\n        enabled=False\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.ToggleJoinRequestRequest(\n        channel='username',\n        enabled=False\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.payments.ExportInvoiceRequest(\n        invoice_media=types.InputMediaUploadedPhoto(\n            file=client.upload_file('/path/to/file.jpg'),\n            spoiler=True,\n            stickers=[types.InputDocument(\n                id=-12398745604826,\n                access_hash=-12398745604826,\n                file_reference=b'arbitrary\\x7f data \\xfa here'\n            )],\n            ttl_seconds=42\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.TranscribeAudioRequest(\n        peer='username',\n        msg_id=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.RateTranscribedAudioRequest(\n        peer='username',\n        msg_id=42,\n        transcription_id=-12398745604826,\n        good=False\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.payments.AssignAppStoreTransactionRequest(\n        receipt=b'arbitrary\\x7f data \\xfa here',\n        purpose=types.InputStorePaymentPremiumSubscription(\n            restore=True,\n            upgrade=True\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.payments.AssignPlayMarketTransactionRequest(\n        receipt=types.DataJSON(\n            data='some string here'\n        ),\n        purpose=types.InputStorePaymentPremiumSubscription(\n            restore=True,\n            upgrade=True\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.payments.CanPurchasePremiumRequest(\n        purpose=types.InputStorePaymentPremiumSubscription(\n            restore=True,\n            upgrade=True\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.help.GetPremiumPromoRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetCustomEmojiDocumentsRequest(\n        document_id=[-12398745604826]\n    ))\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetEmojiStickersRequest(\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetFeaturedEmojiStickersRequest(\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.UpdateEmojiStatusRequest(\n        emoji_status=types.EmojiStatus(\n            document_id=-12398745604826\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetDefaultEmojiStatusesRequest(\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetRecentEmojiStatusesRequest(\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.ClearRecentEmojiStatusesRequest())\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ReportReactionRequest(\n        peer='username',\n        id=42,\n        reaction_peer='username'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetTopReactionsRequest(\n        limit=100,\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetRecentReactionsRequest(\n        limit=100,\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.ClearRecentReactionsRequest())\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetExtendedMediaRequest(\n        peer='username',\n        id=[42]\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.auth.ImportWebTokenAuthorizationRequest(\n        api_id=42,\n        api_hash='some string here',\n        web_auth_token='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.ReorderUsernamesRequest(\n        order=['some string here']\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.ToggleUsernameRequest(\n        username='some string here',\n        active=False\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.ReorderUsernamesRequest(\n        channel='username',\n        order=['some string here']\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.ToggleUsernameRequest(\n        channel='username',\n        username='some string here',\n        active=False\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.DeactivateAllUsernamesRequest(\n        channel='username'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.ToggleForumRequest(\n        channel='username',\n        enabled=False\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.CreateForumTopicRequest(\n        channel='username',\n        title='My awesome title',\n        icon_color=42,\n        icon_emoji_id=-12398745604826,\n        send_as='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.GetForumTopicsRequest(\n        channel='username',\n        offset_date=datetime.datetime(2018, 6, 25),\n        offset_id=42,\n        offset_topic=42,\n        limit=100,\n        q='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.GetForumTopicsByIDRequest(\n        channel='username',\n        topics=[42]\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.EditForumTopicRequest(\n        channel='username',\n        topic_id=42,\n        title='My awesome title',\n        icon_emoji_id=-12398745604826,\n        closed=False,\n        hidden=False\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.UpdatePinnedForumTopicRequest(\n        channel='username',\n        topic_id=42,\n        pinned=False\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.DeleteTopicHistoryRequest(\n        channel='username',\n        top_msg_id=42\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.ReorderPinnedForumTopicsRequest(\n        channel='username',\n        order=[42],\n        force=True\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.ToggleAntiSpamRequest(\n        channel='username',\n        enabled=False\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.ReportAntiSpamFalsePositiveRequest(\n        channel='username',\n        msg_id=42\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SetDefaultHistoryTTLRequest(\n        period=42\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetDefaultHistoryTTLRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.ExportContactTokenRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.contacts.ImportContactTokenRequest(\n        token='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.photos.UploadContactProfilePhotoRequest(\n        user_id='username',\n        suggest=True,\n        save=True,\n        file=client.upload_file('/path/to/file.jpg'),\n        video=client.upload_file('/path/to/file.mp4'),\n        video_start_ts=7.13,\n        video_emoji_markup=types.VideoSize(\n            type='some string here',\n            w=42,\n            h=42,\n            size=42,\n            video_start_ts=7.13\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.channels.ToggleParticipantsHiddenRequest(\n        channel='username',\n        enabled=False\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SendBotRequestedPeerRequest(\n        peer='username',\n        msg_id=42,\n        button_id=42,\n        requested_peer='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetDefaultProfilePhotoEmojisRequest(\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetDefaultGroupPhotoEmojisRequest(\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.auth.RequestFirebaseSmsRequest(\n        phone_number='some string here',\n        phone_code_hash='some string here',\n        safety_net_token='some string here',\n        ios_push_secret='some string here'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetEmojiGroupsRequest(\n        hash=0\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetEmojiStatusGroupsRequest(\n        hash=0\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetEmojiProfilePhotoGroupsRequest(\n        hash=0\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SearchCustomEmojiRequest(\n        emoticon='some string here',\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.TogglePeerTranslationsRequest(\n        peer='username',\n        disabled=True\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.GetAutoSaveSettingsRequest())\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.SaveAutoSaveSettingsRequest(\n        settings=types.AutoSaveSettings(\n            photos=True,\n            videos=True,\n            video_max_size=-12398745604826\n        ),\n        users=True,\n        chats=True,\n        broadcasts=True,\n        peer='username'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.account.DeleteAutoSaveExceptionsRequest())\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.stickers.ChangeStickerRequest(\n        sticker=types.InputDocument(\n            id=-12398745604826,\n            access_hash=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        ),\n        emoji='some string here',\n        mask_coords=types.MaskCoords(\n            n=42,\n            x=7.13,\n            y=7.13,\n            zoom=7.13\n        ),\n        keywords='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.stickers.RenameStickerSetRequest(\n        stickerset=types.InputStickerSetID(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        title='My awesome title'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.stickers.DeleteStickerSetRequest(\n        stickerset=types.InputStickerSetID(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.GetBotAppRequest(\n        app=types.InputBotAppID(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        hash=-12398745604826\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.RequestAppWebViewRequest(\n        peer='username',\n        app=types.InputBotAppID(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        platform='some string here',\n        write_allowed=True,\n        start_param='some string here',\n        theme_params=types.DataJSON(\n            data='some string here'\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.bots.SetBotInfoRequest(\n        lang_code='en',\n        bot='username',\n        name='some string here',\n        about='some string here',\n        description='some string here'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.bots.GetBotInfoRequest(\n        lang_code='en',\n        bot='username'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.auth.ResetLoginEmailRequest(\n        phone_number='some string here',\n        phone_code_hash='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.chatlists.ExportChatlistInviteRequest(\n        chatlist=types.InputChatlistDialogFilter(\n            filter_id=42\n        ),\n        title='My awesome title',\n        peers=['username']\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.chatlists.DeleteExportedInviteRequest(\n        chatlist=types.InputChatlistDialogFilter(\n            filter_id=42\n        ),\n        slug='some string here'\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.chatlists.EditExportedInviteRequest(\n        chatlist=types.InputChatlistDialogFilter(\n            filter_id=42\n        ),\n        slug='some string here',\n        title='My awesome title',\n        peers=['username']\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.chatlists.GetExportedInvitesRequest(\n        chatlist=types.InputChatlistDialogFilter(\n            filter_id=42\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.chatlists.CheckChatlistInviteRequest(\n        slug='some string here'\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.chatlists.JoinChatlistInviteRequest(\n        slug='some string here',\n        peers=['username']\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.chatlists.GetChatlistUpdatesRequest(\n        chatlist=types.InputChatlistDialogFilter(\n            filter_id=42\n        )\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.chatlists.JoinChatlistUpdatesRequest(\n        chatlist=types.InputChatlistDialogFilter(\n            filter_id=42\n        ),\n        peers=['username']\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.chatlists.HideChatlistUpdatesRequest(\n        chatlist=types.InputChatlistDialogFilter(\n            filter_id=42\n        )\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.chatlists.GetLeaveChatlistSuggestionsRequest(\n        chatlist=types.InputChatlistDialogFilter(\n            filter_id=42\n        )\n    ))\n    for x in result:\n        print(x)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.chatlists.LeaveChatlistRequest(\n        chatlist=types.InputChatlistDialogFilter(\n            filter_id=42\n        ),\n        peers=['username']\n    ))\n    print(result.stringify())",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.bots.ReorderUsernamesRequest(\n        bot='username',\n        order=['some string here']\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.bots.ToggleUsernameRequest(\n        bot='username',\n        username='some string here',\n        active=False\n    ))\n    print(result)",
        "from telethon.sync import TelegramClient\nfrom telethon import functions, types\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    result = client(functions.messages.SetChatWallPaperRequest(\n        peer='username',\n        wallpaper=types.InputWallPaper(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        settings=types.WallPaperSettings(\n            blur=True,\n            motion=True,\n            background_color=42,\n            second_background_color=42,\n            third_background_color=42,\n            fourth_background_color=42,\n            intensity=42,\n            rotation=42\n        ),\n        id=42\n    ))\n    print(result.stringify())"
    ],
    "requests": [
        "SendCodeRequest",
        "SignUpRequest",
        "SignInRequest",
        "LogOutRequest",
        "ResetAuthorizationsRequest",
        "ExportAuthorizationRequest",
        "ImportAuthorizationRequest",
        "BindTempAuthKeyRequest",
        "RegisterDeviceRequest",
        "UnregisterDeviceRequest",
        "UpdateNotifySettingsRequest",
        "GetNotifySettingsRequest",
        "ResetNotifySettingsRequest",
        "UpdateProfileRequest",
        "UpdateStatusRequest",
        "GetWallPapersRequest",
        "ReportPeerRequest",
        "GetUsersRequest",
        "GetFullUserRequest",
        "GetContactIDsRequest",
        "GetStatusesRequest",
        "GetContactsRequest",
        "ImportContactsRequest",
        "DeleteContactsRequest",
        "DeleteByPhonesRequest",
        "BlockRequest",
        "UnblockRequest",
        "GetBlockedRequest",
        "GetMessagesRequest",
        "GetDialogsRequest",
        "GetHistoryRequest",
        "SearchRequest",
        "ReadHistoryRequest",
        "DeleteHistoryRequest",
        "DeleteMessagesRequest",
        "ReceivedMessagesRequest",
        "SetTypingRequest",
        "SendMessageRequest",
        "SendMediaRequest",
        "ForwardMessagesRequest",
        "ReportSpamRequest",
        "GetPeerSettingsRequest",
        "ReportRequest",
        "GetChatsRequest",
        "GetFullChatRequest",
        "EditChatTitleRequest",
        "EditChatPhotoRequest",
        "AddChatUserRequest",
        "DeleteChatUserRequest",
        "CreateChatRequest",
        "GetStateRequest",
        "GetDifferenceRequest",
        "UpdateProfilePhotoRequest",
        "UploadProfilePhotoRequest",
        "DeletePhotosRequest",
        "SaveFilePartRequest",
        "GetFileRequest",
        "GetConfigRequest",
        "GetNearestDcRequest",
        "GetAppUpdateRequest",
        "GetInviteTextRequest",
        "GetUserPhotosRequest",
        "GetDhConfigRequest",
        "RequestEncryptionRequest",
        "AcceptEncryptionRequest",
        "DiscardEncryptionRequest",
        "SetEncryptedTypingRequest",
        "ReadEncryptedHistoryRequest",
        "SendEncryptedRequest",
        "SendEncryptedFileRequest",
        "SendEncryptedServiceRequest",
        "ReceivedQueueRequest",
        "ReportEncryptedSpamRequest",
        "SaveBigFilePartRequest",
        "GetSupportRequest",
        "ReadMessageContentsRequest",
        "CheckUsernameRequest",
        "UpdateUsernameRequest",
        "SearchRequest",
        "GetPrivacyRequest",
        "SetPrivacyRequest",
        "DeleteAccountRequest",
        "GetAccountTTLRequest",
        "SetAccountTTLRequest",
        "ResolveUsernameRequest",
        "SendChangePhoneCodeRequest",
        "ChangePhoneRequest",
        "GetStickersRequest",
        "GetAllStickersRequest",
        "UpdateDeviceLockedRequest",
        "ImportBotAuthorizationRequest",
        "GetWebPagePreviewRequest",
        "GetAuthorizationsRequest",
        "ResetAuthorizationRequest",
        "GetPasswordRequest",
        "GetPasswordSettingsRequest",
        "UpdatePasswordSettingsRequest",
        "CheckPasswordRequest",
        "RequestPasswordRecoveryRequest",
        "RecoverPasswordRequest",
        "ExportChatInviteRequest",
        "CheckChatInviteRequest",
        "ImportChatInviteRequest",
        "GetStickerSetRequest",
        "InstallStickerSetRequest",
        "UninstallStickerSetRequest",
        "StartBotRequest",
        "GetAppChangelogRequest",
        "GetMessagesViewsRequest",
        "ReadHistoryRequest",
        "DeleteMessagesRequest",
        "ReportSpamRequest",
        "GetMessagesRequest",
        "GetParticipantsRequest",
        "GetParticipantRequest",
        "GetChannelsRequest",
        "GetFullChannelRequest",
        "CreateChannelRequest",
        "EditAdminRequest",
        "EditTitleRequest",
        "EditPhotoRequest",
        "CheckUsernameRequest",
        "UpdateUsernameRequest",
        "JoinChannelRequest",
        "LeaveChannelRequest",
        "InviteToChannelRequest",
        "DeleteChannelRequest",
        "GetChannelDifferenceRequest",
        "EditChatAdminRequest",
        "MigrateChatRequest",
        "SearchGlobalRequest",
        "ReorderStickerSetsRequest",
        "GetDocumentByHashRequest",
        "GetSavedGifsRequest",
        "SaveGifRequest",
        "GetInlineBotResultsRequest",
        "SetInlineBotResultsRequest",
        "SendInlineBotResultRequest",
        "ExportMessageLinkRequest",
        "ToggleSignaturesRequest",
        "ResendCodeRequest",
        "CancelCodeRequest",
        "GetMessageEditDataRequest",
        "EditMessageRequest",
        "EditInlineBotMessageRequest",
        "GetBotCallbackAnswerRequest",
        "SetBotCallbackAnswerRequest",
        "GetTopPeersRequest",
        "ResetTopPeerRatingRequest",
        "GetPeerDialogsRequest",
        "SaveDraftRequest",
        "GetAllDraftsRequest",
        "GetFeaturedStickersRequest",
        "ReadFeaturedStickersRequest",
        "GetRecentStickersRequest",
        "SaveRecentStickerRequest",
        "ClearRecentStickersRequest",
        "GetArchivedStickersRequest",
        "SendConfirmPhoneCodeRequest",
        "ConfirmPhoneRequest",
        "GetAdminedPublicChannelsRequest",
        "GetMaskStickersRequest",
        "GetAttachedStickersRequest",
        "DropTempAuthKeysRequest",
        "SetGameScoreRequest",
        "SetInlineGameScoreRequest",
        "GetGameHighScoresRequest",
        "GetInlineGameHighScoresRequest",
        "GetCommonChatsRequest",
        "SetBotUpdatesStatusRequest",
        "GetWebPageRequest",
        "ToggleDialogPinRequest",
        "ReorderPinnedDialogsRequest",
        "GetPinnedDialogsRequest",
        "SendCustomRequestRequest",
        "AnswerWebhookJSONQueryRequest",
        "GetWebFileRequest",
        "GetPaymentFormRequest",
        "GetPaymentReceiptRequest",
        "ValidateRequestedInfoRequest",
        "SendPaymentFormRequest",
        "GetTmpPasswordRequest",
        "GetSavedInfoRequest",
        "ClearSavedInfoRequest",
        "SetBotShippingResultsRequest",
        "SetBotPrecheckoutResultsRequest",
        "CreateStickerSetRequest",
        "RemoveStickerFromSetRequest",
        "ChangeStickerPositionRequest",
        "AddStickerToSetRequest",
        "UploadMediaRequest",
        "GetCallConfigRequest",
        "RequestCallRequest",
        "AcceptCallRequest",
        "ConfirmCallRequest",
        "ReceivedCallRequest",
        "DiscardCallRequest",
        "SetCallRatingRequest",
        "SaveCallDebugRequest",
        "GetCdnFileRequest",
        "ReuploadCdnFileRequest",
        "GetCdnConfigRequest",
        "GetLangPackRequest",
        "GetStringsRequest",
        "GetDifferenceRequest",
        "GetLanguagesRequest",
        "EditBannedRequest",
        "GetAdminLogRequest",
        "GetCdnFileHashesRequest",
        "SendScreenshotNotificationRequest",
        "SetStickersRequest",
        "GetFavedStickersRequest",
        "FaveStickerRequest",
        "ReadMessageContentsRequest",
        "ResetSavedRequest",
        "GetUnreadMentionsRequest",
        "DeleteHistoryRequest",
        "GetRecentMeUrlsRequest",
        "TogglePreHistoryHiddenRequest",
        "ReadMentionsRequest",
        "GetRecentLocationsRequest",
        "SendMultiMediaRequest",
        "UploadEncryptedFileRequest",
        "GetWebAuthorizationsRequest",
        "ResetWebAuthorizationRequest",
        "ResetWebAuthorizationsRequest",
        "SearchStickerSetsRequest",
        "GetFileHashesRequest",
        "GetTermsOfServiceUpdateRequest",
        "AcceptTermsOfServiceRequest",
        "GetAllSecureValuesRequest",
        "GetSecureValueRequest",
        "SaveSecureValueRequest",
        "DeleteSecureValueRequest",
        "SetSecureValueErrorsRequest",
        "GetAuthorizationFormRequest",
        "AcceptAuthorizationRequest",
        "SendVerifyPhoneCodeRequest",
        "VerifyPhoneRequest",
        "SendVerifyEmailCodeRequest",
        "VerifyEmailRequest",
        "GetDeepLinkInfoRequest",
        "GetSavedRequest",
        "GetLeftChannelsRequest",
        "InitTakeoutSessionRequest",
        "FinishTakeoutSessionRequest",
        "GetSplitRangesRequest",
        "MarkDialogUnreadRequest",
        "GetDialogUnreadMarksRequest",
        "ToggleTopPeersRequest",
        "ClearAllDraftsRequest",
        "GetAppConfigRequest",
        "SaveAppLogRequest",
        "GetPassportConfigRequest",
        "GetLanguageRequest",
        "UpdatePinnedMessageRequest",
        "ConfirmPasswordEmailRequest",
        "ResendPasswordEmailRequest",
        "CancelPasswordEmailRequest",
        "GetSupportNameRequest",
        "GetUserInfoRequest",
        "EditUserInfoRequest",
        "GetContactSignUpNotificationRequest",
        "SetContactSignUpNotificationRequest",
        "GetNotifyExceptionsRequest",
        "SendVoteRequest",
        "GetPollResultsRequest",
        "GetOnlinesRequest",
        "EditChatAboutRequest",
        "EditChatDefaultBannedRightsRequest",
        "GetWallPaperRequest",
        "UploadWallPaperRequest",
        "SaveWallPaperRequest",
        "InstallWallPaperRequest",
        "ResetWallPapersRequest",
        "GetAutoDownloadSettingsRequest",
        "SaveAutoDownloadSettingsRequest",
        "GetEmojiKeywordsRequest",
        "GetEmojiKeywordsDifferenceRequest",
        "GetEmojiKeywordsLanguagesRequest",
        "GetEmojiURLRequest",
        "EditPeerFoldersRequest",
        "GetSearchCountersRequest",
        "GetGroupsForDiscussionRequest",
        "SetDiscussionGroupRequest",
        "RequestUrlAuthRequest",
        "AcceptUrlAuthRequest",
        "HidePeerSettingsBarRequest",
        "AddContactRequest",
        "AcceptContactRequest",
        "EditCreatorRequest",
        "GetLocatedRequest",
        "EditLocationRequest",
        "ToggleSlowModeRequest",
        "GetScheduledHistoryRequest",
        "GetScheduledMessagesRequest",
        "SendScheduledMessagesRequest",
        "DeleteScheduledMessagesRequest",
        "UploadThemeRequest",
        "CreateThemeRequest",
        "UpdateThemeRequest",
        "SaveThemeRequest",
        "InstallThemeRequest",
        "GetThemeRequest",
        "GetThemesRequest",
        "ExportLoginTokenRequest",
        "ImportLoginTokenRequest",
        "AcceptLoginTokenRequest",
        "SetContentSettingsRequest",
        "GetContentSettingsRequest",
        "GetInactiveChannelsRequest",
        "GetMultiWallPapersRequest",
        "GetPollVotesRequest",
        "ToggleStickerSetsRequest",
        "GetBankCardDataRequest",
        "GetDialogFiltersRequest",
        "GetSuggestedDialogFiltersRequest",
        "UpdateDialogFilterRequest",
        "UpdateDialogFiltersOrderRequest",
        "GetBroadcastStatsRequest",
        "LoadAsyncGraphRequest",
        "SetStickerSetThumbRequest",
        "SetBotCommandsRequest",
        "GetOldFeaturedStickersRequest",
        "GetPromoDataRequest",
        "HidePromoDataRequest",
        "SendSignalingDataRequest",
        "GetMegagroupStatsRequest",
        "GetGlobalPrivacySettingsRequest",
        "SetGlobalPrivacySettingsRequest",
        "DismissSuggestionRequest",
        "GetCountriesListRequest",
        "GetRepliesRequest",
        "GetDiscussionMessageRequest",
        "ReadDiscussionRequest",
        "BlockFromRepliesRequest",
        "GetMessagePublicForwardsRequest",
        "GetMessageStatsRequest",
        "UnpinAllMessagesRequest",
        "CreateGroupCallRequest",
        "JoinGroupCallRequest",
        "LeaveGroupCallRequest",
        "InviteToGroupCallRequest",
        "DiscardGroupCallRequest",
        "ToggleGroupCallSettingsRequest",
        "GetGroupCallRequest",
        "GetGroupParticipantsRequest",
        "CheckGroupCallRequest",
        "DeleteChatRequest",
        "DeletePhoneCallHistoryRequest",
        "CheckHistoryImportRequest",
        "InitHistoryImportRequest",
        "UploadImportedMediaRequest",
        "StartHistoryImportRequest",
        "GetExportedChatInvitesRequest",
        "GetExportedChatInviteRequest",
        "EditExportedChatInviteRequest",
        "DeleteRevokedExportedChatInvitesRequest",
        "DeleteExportedChatInviteRequest",
        "GetAdminsWithInvitesRequest",
        "GetChatInviteImportersRequest",
        "SetHistoryTTLRequest",
        "ReportProfilePhotoRequest",
        "ConvertToGigagroupRequest",
        "CheckHistoryImportPeerRequest",
        "ToggleGroupCallRecordRequest",
        "EditGroupCallParticipantRequest",
        "EditGroupCallTitleRequest",
        "GetGroupCallJoinAsRequest",
        "ExportGroupCallInviteRequest",
        "ToggleGroupCallStartSubscriptionRequest",
        "StartScheduledGroupCallRequest",
        "SaveDefaultGroupCallJoinAsRequest",
        "JoinGroupCallPresentationRequest",
        "LeaveGroupCallPresentationRequest",
        "CheckShortNameRequest",
        "SuggestShortNameRequest",
        "ResetBotCommandsRequest",
        "GetBotCommandsRequest",
        "ResetPasswordRequest",
        "DeclinePasswordResetRequest",
        "CheckRecoveryPasswordRequest",
        "GetChatThemesRequest",
        "SetChatThemeRequest",
        "ViewSponsoredMessageRequest",
        "GetSponsoredMessagesRequest",
        "GetMessageReadParticipantsRequest",
        "GetSearchResultsCalendarRequest",
        "GetSearchResultsPositionsRequest",
        "HideChatJoinRequestRequest",
        "HideAllChatJoinRequestsRequest",
        "ToggleNoForwardsRequest",
        "SaveDefaultSendAsRequest",
        "GetSendAsRequest",
        "SetAuthorizationTTLRequest",
        "ChangeAuthorizationSettingsRequest",
        "DeleteParticipantHistoryRequest",
        "SendReactionRequest",
        "GetMessagesReactionsRequest",
        "GetMessageReactionsListRequest",
        "SetChatAvailableReactionsRequest",
        "GetAvailableReactionsRequest",
        "SetDefaultReactionRequest",
        "TranslateTextRequest",
        "GetUnreadReactionsRequest",
        "ReadReactionsRequest",
        "ResolvePhoneRequest",
        "GetGroupCallStreamChannelsRequest",
        "GetGroupCallStreamRtmpUrlRequest",
        "SearchSentMediaRequest",
        "GetAttachMenuBotsRequest",
        "GetAttachMenuBotRequest",
        "ToggleBotInAttachMenuRequest",
        "RequestWebViewRequest",
        "ProlongWebViewRequest",
        "RequestSimpleWebViewRequest",
        "SendWebViewResultMessageRequest",
        "SendWebViewDataRequest",
        "SetBotMenuButtonRequest",
        "GetBotMenuButtonRequest",
        "GetSavedRingtonesRequest",
        "SaveRingtoneRequest",
        "UploadRingtoneRequest",
        "SetBotBroadcastDefaultAdminRightsRequest",
        "SetBotGroupDefaultAdminRightsRequest",
        "SaveCallLogRequest",
        "ToggleJoinToSendRequest",
        "ToggleJoinRequestRequest",
        "ExportInvoiceRequest",
        "TranscribeAudioRequest",
        "RateTranscribedAudioRequest",
        "AssignAppStoreTransactionRequest",
        "AssignPlayMarketTransactionRequest",
        "CanPurchasePremiumRequest",
        "GetPremiumPromoRequest",
        "GetCustomEmojiDocumentsRequest",
        "GetEmojiStickersRequest",
        "GetFeaturedEmojiStickersRequest",
        "UpdateEmojiStatusRequest",
        "GetDefaultEmojiStatusesRequest",
        "GetRecentEmojiStatusesRequest",
        "ClearRecentEmojiStatusesRequest",
        "ReportReactionRequest",
        "GetTopReactionsRequest",
        "GetRecentReactionsRequest",
        "ClearRecentReactionsRequest",
        "GetExtendedMediaRequest",
        "ImportWebTokenAuthorizationRequest",
        "ReorderUsernamesRequest",
        "ToggleUsernameRequest",
        "ReorderUsernamesRequest",
        "ToggleUsernameRequest",
        "DeactivateAllUsernamesRequest",
        "ToggleForumRequest",
        "CreateForumTopicRequest",
        "GetForumTopicsRequest",
        "GetForumTopicsByIDRequest",
        "EditForumTopicRequest",
        "UpdatePinnedForumTopicRequest",
        "DeleteTopicHistoryRequest",
        "ReorderPinnedForumTopicsRequest",
        "ToggleAntiSpamRequest",
        "ReportAntiSpamFalsePositiveRequest",
        "SetDefaultHistoryTTLRequest",
        "GetDefaultHistoryTTLRequest",
        "ExportContactTokenRequest",
        "ImportContactTokenRequest",
        "UploadContactProfilePhotoRequest",
        "ToggleParticipantsHiddenRequest",
        "SendBotRequestedPeerRequest",
        "GetDefaultProfilePhotoEmojisRequest",
        "GetDefaultGroupPhotoEmojisRequest",
        "RequestFirebaseSmsRequest",
        "GetEmojiGroupsRequest",
        "GetEmojiStatusGroupsRequest",
        "GetEmojiProfilePhotoGroupsRequest",
        "SearchCustomEmojiRequest",
        "TogglePeerTranslationsRequest",
        "GetAutoSaveSettingsRequest",
        "SaveAutoSaveSettingsRequest",
        "DeleteAutoSaveExceptionsRequest",
        "ChangeStickerRequest",
        "RenameStickerSetRequest",
        "DeleteStickerSetRequest",
        "GetBotAppRequest",
        "RequestAppWebViewRequest",
        "SetBotInfoRequest",
        "GetBotInfoRequest",
        "ResetLoginEmailRequest",
        "ExportChatlistInviteRequest",
        "DeleteExportedInviteRequest",
        "EditExportedInviteRequest",
        "GetExportedInvitesRequest",
        "CheckChatlistInviteRequest",
        "JoinChatlistInviteRequest",
        "GetChatlistUpdatesRequest",
        "JoinChatlistUpdatesRequest",
        "HideChatlistUpdatesRequest",
        "GetLeaveChatlistSuggestionsRequest",
        "LeaveChatlistRequest",
        "ReorderUsernamesRequest",
        "ToggleUsernameRequest",
        "SetChatWallPaperRequest"
    ],
    "requests_desc": [
        [
            "SendCodeRequest",
            ""
        ],
        [
            "SignUpRequest",
            ""
        ],
        [
            "SignInRequest",
            ""
        ],
        [
            "LogOutRequest",
            ""
        ],
        [
            "ResetAuthorizationsRequest",
            ""
        ],
        [
            "ExportAuthorizationRequest",
            ""
        ],
        [
            "ImportAuthorizationRequest",
            ""
        ],
        [
            "BindTempAuthKeyRequest",
            ""
        ],
        [
            "RegisterDeviceRequest",
            ""
        ],
        [
            "UnregisterDeviceRequest",
            ""
        ],
        [
            "UpdateNotifySettingsRequest",
            ""
        ],
        [
            "GetNotifySettingsRequest",
            ""
        ],
        [
            "ResetNotifySettingsRequest",
            ""
        ],
        [
            "UpdateProfileRequest",
            ""
        ],
        [
            "UpdateStatusRequest",
            ""
        ],
        [
            "GetWallPapersRequest",
            "hash - long"
        ],
        [
            "ReportPeerRequest",
            ""
        ],
        [
            "GetUsersRequest",
            ""
        ],
        [
            "GetFullUserRequest",
            ""
        ],
        [
            "GetContactIDsRequest",
            "hash - long"
        ],
        [
            "GetStatusesRequest",
            ""
        ],
        [
            "GetContactsRequest",
            "hash - long"
        ],
        [
            "ImportContactsRequest",
            "contacts - InputContact"
        ],
        [
            "DeleteContactsRequest",
            ""
        ],
        [
            "DeleteByPhonesRequest",
            "phones - string"
        ],
        [
            "BlockRequest",
            ""
        ],
        [
            "UnblockRequest",
            ""
        ],
        [
            "GetBlockedRequest",
            "offset - int\n\n"
        ],
        [
            "GetMessagesRequest",
            "id - InputMessage"
        ],
        [
            "GetDialogsRequest",
            ""
        ],
        [
            "GetHistoryRequest",
            ""
        ],
        [
            "SearchRequest",
            ""
        ],
        [
            "ReadHistoryRequest",
            ""
        ],
        [
            "DeleteHistoryRequest",
            ""
        ],
        [
            "DeleteMessagesRequest",
            ""
        ],
        [
            "ReceivedMessagesRequest",
            "max_id - int"
        ],
        [
            "SetTypingRequest",
            ""
        ],
        [
            "SendMessageRequest",
            ""
        ],
        [
            "SendMediaRequest",
            ""
        ],
        [
            "ForwardMessagesRequest",
            ""
        ],
        [
            "ReportSpamRequest",
            ""
        ],
        [
            "GetPeerSettingsRequest",
            ""
        ],
        [
            "ReportRequest",
            "peer - InputPeer\n\n\n"
        ],
        [
            "GetChatsRequest",
            ""
        ],
        [
            "GetFullChatRequest",
            ""
        ],
        [
            "EditChatTitleRequest",
            ""
        ],
        [
            "EditChatPhotoRequest",
            ""
        ],
        [
            "AddChatUserRequest",
            ""
        ],
        [
            "DeleteChatUserRequest",
            ""
        ],
        [
            "CreateChatRequest",
            ""
        ],
        [
            "GetStateRequest",
            ""
        ],
        [
            "GetDifferenceRequest",
            ""
        ],
        [
            "UpdateProfilePhotoRequest",
            ""
        ],
        [
            "UploadProfilePhotoRequest",
            ""
        ],
        [
            "DeletePhotosRequest",
            "id - InputPhoto"
        ],
        [
            "SaveFilePartRequest",
            ""
        ],
        [
            "GetFileRequest",
            ""
        ],
        [
            "GetConfigRequest",
            ""
        ],
        [
            "GetNearestDcRequest",
            ""
        ],
        [
            "GetAppUpdateRequest",
            "source - string"
        ],
        [
            "GetInviteTextRequest",
            ""
        ],
        [
            "GetUserPhotosRequest",
            ""
        ],
        [
            "GetDhConfigRequest",
            ""
        ],
        [
            "RequestEncryptionRequest",
            ""
        ],
        [
            "AcceptEncryptionRequest",
            ""
        ],
        [
            "DiscardEncryptionRequest",
            ""
        ],
        [
            "SetEncryptedTypingRequest",
            ""
        ],
        [
            "ReadEncryptedHistoryRequest",
            ""
        ],
        [
            "SendEncryptedRequest",
            ""
        ],
        [
            "SendEncryptedFileRequest",
            ""
        ],
        [
            "SendEncryptedServiceRequest",
            ""
        ],
        [
            "ReceivedQueueRequest",
            ""
        ],
        [
            "ReportEncryptedSpamRequest",
            ""
        ],
        [
            "SaveBigFilePartRequest",
            ""
        ],
        [
            "GetSupportRequest",
            ""
        ],
        [
            "ReadMessageContentsRequest",
            "id - int"
        ],
        [
            "CheckUsernameRequest",
            ""
        ],
        [
            "UpdateUsernameRequest",
            ""
        ],
        [
            "SearchRequest",
            ""
        ],
        [
            "GetPrivacyRequest",
            ""
        ],
        [
            "SetPrivacyRequest",
            ""
        ],
        [
            "DeleteAccountRequest",
            ""
        ],
        [
            "GetAccountTTLRequest",
            ""
        ],
        [
            "SetAccountTTLRequest",
            ""
        ],
        [
            "ResolveUsernameRequest",
            ""
        ],
        [
            "SendChangePhoneCodeRequest",
            ""
        ],
        [
            "ChangePhoneRequest",
            ""
        ],
        [
            "GetStickersRequest",
            ""
        ],
        [
            "GetAllStickersRequest",
            "hash - long"
        ],
        [
            "UpdateDeviceLockedRequest",
            "period - int"
        ],
        [
            "ImportBotAuthorizationRequest",
            ""
        ],
        [
            "GetWebPagePreviewRequest",
            ""
        ],
        [
            "GetAuthorizationsRequest",
            ""
        ],
        [
            "ResetAuthorizationRequest",
            ""
        ],
        [
            "GetPasswordRequest",
            ""
        ],
        [
            "GetPasswordSettingsRequest",
            ""
        ],
        [
            "UpdatePasswordSettingsRequest",
            ""
        ],
        [
            "CheckPasswordRequest",
            ""
        ],
        [
            "RequestPasswordRecoveryRequest",
            ""
        ],
        [
            "RecoverPasswordRequest",
            ""
        ],
        [
            "ExportChatInviteRequest",
            ""
        ],
        [
            "CheckChatInviteRequest",
            ""
        ],
        [
            "ImportChatInviteRequest",
            ""
        ],
        [
            "GetStickerSetRequest",
            ""
        ],
        [
            "InstallStickerSetRequest",
            ""
        ],
        [
            "UninstallStickerSetRequest",
            ""
        ],
        [
            "StartBotRequest",
            ""
        ],
        [
            "GetAppChangelogRequest",
            "prev_app_version - string"
        ],
        [
            "GetMessagesViewsRequest",
            ""
        ],
        [
            "ReadHistoryRequest",
            ""
        ],
        [
            "DeleteMessagesRequest",
            ""
        ],
        [
            "ReportSpamRequest",
            ""
        ],
        [
            "GetMessagesRequest",
            ""
        ],
        [
            "GetParticipantsRequest",
            ""
        ],
        [
            "GetParticipantRequest",
            ""
        ],
        [
            "GetChannelsRequest",
            ""
        ],
        [
            "GetFullChannelRequest",
            ""
        ],
        [
            "CreateChannelRequest",
            ""
        ],
        [
            "EditAdminRequest",
            ""
        ],
        [
            "EditTitleRequest",
            ""
        ],
        [
            "EditPhotoRequest",
            ""
        ],
        [
            "CheckUsernameRequest",
            ""
        ],
        [
            "UpdateUsernameRequest",
            ""
        ],
        [
            "JoinChannelRequest",
            ""
        ],
        [
            "LeaveChannelRequest",
            ""
        ],
        [
            "InviteToChannelRequest",
            ""
        ],
        [
            "DeleteChannelRequest",
            ""
        ],
        [
            "GetChannelDifferenceRequest",
            ""
        ],
        [
            "EditChatAdminRequest",
            ""
        ],
        [
            "MigrateChatRequest",
            ""
        ],
        [
            "SearchGlobalRequest",
            ""
        ],
        [
            "ReorderStickerSetsRequest",
            "order - long\n\n"
        ],
        [
            "GetDocumentByHashRequest",
            ""
        ],
        [
            "GetSavedGifsRequest",
            "hash - long"
        ],
        [
            "SaveGifRequest",
            ""
        ],
        [
            "GetInlineBotResultsRequest",
            ""
        ],
        [
            "SetInlineBotResultsRequest",
            ""
        ],
        [
            "SendInlineBotResultRequest",
            ""
        ],
        [
            "ExportMessageLinkRequest",
            ""
        ],
        [
            "ToggleSignaturesRequest",
            ""
        ],
        [
            "ResendCodeRequest",
            ""
        ],
        [
            "CancelCodeRequest",
            ""
        ],
        [
            "GetMessageEditDataRequest",
            ""
        ],
        [
            "EditMessageRequest",
            ""
        ],
        [
            "EditInlineBotMessageRequest",
            ""
        ],
        [
            "GetBotCallbackAnswerRequest",
            ""
        ],
        [
            "SetBotCallbackAnswerRequest",
            ""
        ],
        [
            "GetTopPeersRequest",
            ""
        ],
        [
            "ResetTopPeerRatingRequest",
            ""
        ],
        [
            "GetPeerDialogsRequest",
            ""
        ],
        [
            "SaveDraftRequest",
            ""
        ],
        [
            "GetAllDraftsRequest",
            ""
        ],
        [
            "GetFeaturedStickersRequest",
            "hash - long"
        ],
        [
            "ReadFeaturedStickersRequest",
            "id - long"
        ],
        [
            "GetRecentStickersRequest",
            "hash - long\n"
        ],
        [
            "SaveRecentStickerRequest",
            ""
        ],
        [
            "ClearRecentStickersRequest",
            "attached - flag"
        ],
        [
            "GetArchivedStickersRequest",
            "offset_id - long\n\n\n"
        ],
        [
            "SendConfirmPhoneCodeRequest",
            ""
        ],
        [
            "ConfirmPhoneRequest",
            ""
        ],
        [
            "GetAdminedPublicChannelsRequest",
            "by_location - flag\n"
        ],
        [
            "GetMaskStickersRequest",
            "hash - long"
        ],
        [
            "GetAttachedStickersRequest",
            "media - InputStickeredMedia"
        ],
        [
            "DropTempAuthKeysRequest",
            "except_auth_keys - long"
        ],
        [
            "SetGameScoreRequest",
            ""
        ],
        [
            "SetInlineGameScoreRequest",
            ""
        ],
        [
            "GetGameHighScoresRequest",
            ""
        ],
        [
            "GetInlineGameHighScoresRequest",
            ""
        ],
        [
            "GetCommonChatsRequest",
            ""
        ],
        [
            "SetBotUpdatesStatusRequest",
            "pending_updates_count - int\n"
        ],
        [
            "GetWebPageRequest",
            ""
        ],
        [
            "ToggleDialogPinRequest",
            ""
        ],
        [
            "ReorderPinnedDialogsRequest",
            ""
        ],
        [
            "GetPinnedDialogsRequest",
            "folder_id - int"
        ],
        [
            "SendCustomRequestRequest",
            ""
        ],
        [
            "AnswerWebhookJSONQueryRequest",
            ""
        ],
        [
            "GetWebFileRequest",
            ""
        ],
        [
            "GetPaymentFormRequest",
            ""
        ],
        [
            "GetPaymentReceiptRequest",
            ""
        ],
        [
            "ValidateRequestedInfoRequest",
            ""
        ],
        [
            "SendPaymentFormRequest",
            ""
        ],
        [
            "GetTmpPasswordRequest",
            ""
        ],
        [
            "GetSavedInfoRequest",
            ""
        ],
        [
            "ClearSavedInfoRequest",
            "credentials - flag\n"
        ],
        [
            "SetBotShippingResultsRequest",
            ""
        ],
        [
            "SetBotPrecheckoutResultsRequest",
            ""
        ],
        [
            "CreateStickerSetRequest",
            ""
        ],
        [
            "RemoveStickerFromSetRequest",
            ""
        ],
        [
            "ChangeStickerPositionRequest",
            ""
        ],
        [
            "AddStickerToSetRequest",
            ""
        ],
        [
            "UploadMediaRequest",
            ""
        ],
        [
            "GetCallConfigRequest",
            ""
        ],
        [
            "RequestCallRequest",
            ""
        ],
        [
            "AcceptCallRequest",
            ""
        ],
        [
            "ConfirmCallRequest",
            ""
        ],
        [
            "ReceivedCallRequest",
            ""
        ],
        [
            "DiscardCallRequest",
            ""
        ],
        [
            "SetCallRatingRequest",
            ""
        ],
        [
            "SaveCallDebugRequest",
            ""
        ],
        [
            "GetCdnFileRequest",
            ""
        ],
        [
            "ReuploadCdnFileRequest",
            ""
        ],
        [
            "GetCdnConfigRequest",
            ""
        ],
        [
            "GetLangPackRequest",
            ""
        ],
        [
            "GetStringsRequest",
            ""
        ],
        [
            "GetDifferenceRequest",
            ""
        ],
        [
            "GetLanguagesRequest",
            ""
        ],
        [
            "EditBannedRequest",
            ""
        ],
        [
            "GetAdminLogRequest",
            ""
        ],
        [
            "GetCdnFileHashesRequest",
            ""
        ],
        [
            "SendScreenshotNotificationRequest",
            "peer - InputPeer\n\n"
        ],
        [
            "SetStickersRequest",
            ""
        ],
        [
            "GetFavedStickersRequest",
            "hash - long"
        ],
        [
            "FaveStickerRequest",
            ""
        ],
        [
            "ReadMessageContentsRequest",
            ""
        ],
        [
            "ResetSavedRequest",
            ""
        ],
        [
            "GetUnreadMentionsRequest",
            ""
        ],
        [
            "DeleteHistoryRequest",
            ""
        ],
        [
            "GetRecentMeUrlsRequest",
            "referer - string"
        ],
        [
            "TogglePreHistoryHiddenRequest",
            ""
        ],
        [
            "ReadMentionsRequest",
            "peer - InputPeer\n"
        ],
        [
            "GetRecentLocationsRequest",
            "peer - InputPeer\n\n"
        ],
        [
            "SendMultiMediaRequest",
            ""
        ],
        [
            "UploadEncryptedFileRequest",
            "peer - InputEncryptedChat\n"
        ],
        [
            "GetWebAuthorizationsRequest",
            ""
        ],
        [
            "ResetWebAuthorizationRequest",
            "hash - long"
        ],
        [
            "ResetWebAuthorizationsRequest",
            ""
        ],
        [
            "SearchStickerSetsRequest",
            "q - string\n\n"
        ],
        [
            "GetFileHashesRequest",
            "location - InputFileLocation\n"
        ],
        [
            "GetTermsOfServiceUpdateRequest",
            ""
        ],
        [
            "AcceptTermsOfServiceRequest",
            "id - DataJSON"
        ],
        [
            "GetAllSecureValuesRequest",
            ""
        ],
        [
            "GetSecureValueRequest",
            "types - SecureValueType"
        ],
        [
            "SaveSecureValueRequest",
            ""
        ],
        [
            "DeleteSecureValueRequest",
            "types - SecureValueType"
        ],
        [
            "SetSecureValueErrorsRequest",
            "id - InputUser\n"
        ],
        [
            "GetAuthorizationFormRequest",
            ""
        ],
        [
            "AcceptAuthorizationRequest",
            "bot_id - long\n\n\n\n"
        ],
        [
            "SendVerifyPhoneCodeRequest",
            "phone_number - string\n"
        ],
        [
            "VerifyPhoneRequest",
            "phone_number - string\n\n"
        ],
        [
            "SendVerifyEmailCodeRequest",
            ""
        ],
        [
            "VerifyEmailRequest",
            ""
        ],
        [
            "GetDeepLinkInfoRequest",
            "path - string"
        ],
        [
            "GetSavedRequest",
            ""
        ],
        [
            "GetLeftChannelsRequest",
            "offset - int"
        ],
        [
            "InitTakeoutSessionRequest",
            "contacts - flag\n\n\n\n\n\n"
        ],
        [
            "FinishTakeoutSessionRequest",
            "success - flag"
        ],
        [
            "GetSplitRangesRequest",
            ""
        ],
        [
            "MarkDialogUnreadRequest",
            "peer - InputDialogPeer\n"
        ],
        [
            "GetDialogUnreadMarksRequest",
            ""
        ],
        [
            "ToggleTopPeersRequest",
            "enabled - Bool"
        ],
        [
            "ClearAllDraftsRequest",
            ""
        ],
        [
            "GetAppConfigRequest",
            "hash - int"
        ],
        [
            "SaveAppLogRequest",
            "events - InputAppEvent"
        ],
        [
            "GetPassportConfigRequest",
            "hash - int"
        ],
        [
            "GetLanguageRequest",
            "lang_pack - string\n"
        ],
        [
            "UpdatePinnedMessageRequest",
            ""
        ],
        [
            "ConfirmPasswordEmailRequest",
            "code - string"
        ],
        [
            "ResendPasswordEmailRequest",
            ""
        ],
        [
            "CancelPasswordEmailRequest",
            ""
        ],
        [
            "GetSupportNameRequest",
            ""
        ],
        [
            "GetUserInfoRequest",
            ""
        ],
        [
            "EditUserInfoRequest",
            ""
        ],
        [
            "GetContactSignUpNotificationRequest",
            ""
        ],
        [
            "SetContactSignUpNotificationRequest",
            "silent - Bool"
        ],
        [
            "GetNotifyExceptionsRequest",
            "compare_sound - flag\n\n"
        ],
        [
            "SendVoteRequest",
            ""
        ],
        [
            "GetPollResultsRequest",
            "peer - InputPeer\n"
        ],
        [
            "GetOnlinesRequest",
            "peer - InputPeer"
        ],
        [
            "EditChatAboutRequest",
            "peer - InputPeer\n"
        ],
        [
            "EditChatDefaultBannedRightsRequest",
            ""
        ],
        [
            "GetWallPaperRequest",
            ""
        ],
        [
            "UploadWallPaperRequest",
            ""
        ],
        [
            "SaveWallPaperRequest",
            ""
        ],
        [
            "InstallWallPaperRequest",
            ""
        ],
        [
            "ResetWallPapersRequest",
            ""
        ],
        [
            "GetAutoDownloadSettingsRequest",
            ""
        ],
        [
            "SaveAutoDownloadSettingsRequest",
            "settings - AutoDownloadSettings\n\n"
        ],
        [
            "GetEmojiKeywordsRequest",
            "lang_code - string"
        ],
        [
            "GetEmojiKeywordsDifferenceRequest",
            "lang_code - string\n"
        ],
        [
            "GetEmojiKeywordsLanguagesRequest",
            "lang_codes - string"
        ],
        [
            "GetEmojiURLRequest",
            "lang_code - string"
        ],
        [
            "EditPeerFoldersRequest",
            ""
        ],
        [
            "GetSearchCountersRequest",
            "peer - InputPeer\n\n"
        ],
        [
            "GetGroupsForDiscussionRequest",
            ""
        ],
        [
            "SetDiscussionGroupRequest",
            ""
        ],
        [
            "RequestUrlAuthRequest",
            "peer - InputPeer\n\n\n"
        ],
        [
            "AcceptUrlAuthRequest",
            "write_allowed - flag\n\n\n\n"
        ],
        [
            "HidePeerSettingsBarRequest",
            "peer - InputPeer"
        ],
        [
            "AddContactRequest",
            ""
        ],
        [
            "AcceptContactRequest",
            "id - InputUser"
        ],
        [
            "EditCreatorRequest",
            ""
        ],
        [
            "GetLocatedRequest",
            ""
        ],
        [
            "EditLocationRequest",
            "channel - InputChannel\n\n"
        ],
        [
            "ToggleSlowModeRequest",
            ""
        ],
        [
            "GetScheduledHistoryRequest",
            "peer - InputPeer\n"
        ],
        [
            "GetScheduledMessagesRequest",
            "peer - InputPeer\n"
        ],
        [
            "SendScheduledMessagesRequest",
            "peer - InputPeer\n"
        ],
        [
            "DeleteScheduledMessagesRequest",
            "peer - InputPeer\n"
        ],
        [
            "UploadThemeRequest",
            "file - InputFile\n\n\n"
        ],
        [
            "CreateThemeRequest",
            ""
        ],
        [
            "UpdateThemeRequest",
            ""
        ],
        [
            "SaveThemeRequest",
            "theme - InputTheme\n"
        ],
        [
            "InstallThemeRequest",
            "dark - flag\n\n\n"
        ],
        [
            "GetThemeRequest",
            "format - string\n"
        ],
        [
            "GetThemesRequest",
            "format - string\n"
        ],
        [
            "ExportLoginTokenRequest",
            "api_id - int\n\n"
        ],
        [
            "ImportLoginTokenRequest",
            ""
        ],
        [
            "AcceptLoginTokenRequest",
            "token - bytes"
        ],
        [
            "SetContentSettingsRequest",
            ""
        ],
        [
            "GetContentSettingsRequest",
            ""
        ],
        [
            "GetInactiveChannelsRequest",
            ""
        ],
        [
            "GetMultiWallPapersRequest",
            "wallpapers - InputWallPaper"
        ],
        [
            "GetPollVotesRequest",
            ""
        ],
        [
            "ToggleStickerSetsRequest",
            "stickersets - InputStickerSet\n\n\n"
        ],
        [
            "GetBankCardDataRequest",
            ""
        ],
        [
            "GetDialogFiltersRequest",
            ""
        ],
        [
            "GetSuggestedDialogFiltersRequest",
            ""
        ],
        [
            "UpdateDialogFilterRequest",
            "id - int\n"
        ],
        [
            "UpdateDialogFiltersOrderRequest",
            "order - int"
        ],
        [
            "GetBroadcastStatsRequest",
            ""
        ],
        [
            "LoadAsyncGraphRequest",
            ""
        ],
        [
            "SetStickerSetThumbRequest",
            ""
        ],
        [
            "SetBotCommandsRequest",
            ""
        ],
        [
            "GetOldFeaturedStickersRequest",
            "offset - int\n\n"
        ],
        [
            "GetPromoDataRequest",
            ""
        ],
        [
            "HidePromoDataRequest",
            "peer - InputPeer"
        ],
        [
            "SendSignalingDataRequest",
            "peer - InputPhoneCall\n"
        ],
        [
            "GetMegagroupStatsRequest",
            ""
        ],
        [
            "GetGlobalPrivacySettingsRequest",
            ""
        ],
        [
            "SetGlobalPrivacySettingsRequest",
            ""
        ],
        [
            "DismissSuggestionRequest",
            "peer - InputPeer\n"
        ],
        [
            "GetCountriesListRequest",
            "lang_code - string\n"
        ],
        [
            "GetRepliesRequest",
            "peer - InputPeer\n\n\n\n\n\n\n\n"
        ],
        [
            "GetDiscussionMessageRequest",
            "peer - InputPeer\n"
        ],
        [
            "ReadDiscussionRequest",
            "peer - InputPeer\n\n"
        ],
        [
            "BlockFromRepliesRequest",
            "msg_id - int\n\n\n"
        ],
        [
            "GetMessagePublicForwardsRequest",
            "channel - InputChannel\n\n\n\n\n"
        ],
        [
            "GetMessageStatsRequest",
            "channel - InputChannel\n\n"
        ],
        [
            "UnpinAllMessagesRequest",
            "peer - InputPeer\n"
        ],
        [
            "CreateGroupCallRequest",
            ""
        ],
        [
            "JoinGroupCallRequest",
            ""
        ],
        [
            "LeaveGroupCallRequest",
            "call - InputGroupCall\n"
        ],
        [
            "InviteToGroupCallRequest",
            ""
        ],
        [
            "DiscardGroupCallRequest",
            "call - InputGroupCall"
        ],
        [
            "ToggleGroupCallSettingsRequest",
            ""
        ],
        [
            "GetGroupCallRequest",
            "call - InputGroupCall\n"
        ],
        [
            "GetGroupParticipantsRequest",
            "call - InputGroupCall\n\n\n\n"
        ],
        [
            "CheckGroupCallRequest",
            "call - InputGroupCall\n"
        ],
        [
            "DeleteChatRequest",
            "chat_id - long"
        ],
        [
            "DeletePhoneCallHistoryRequest",
            "revoke - flag"
        ],
        [
            "CheckHistoryImportRequest",
            "import_head - string"
        ],
        [
            "InitHistoryImportRequest",
            ""
        ],
        [
            "UploadImportedMediaRequest",
            "peer - InputPeer\n\n\n"
        ],
        [
            "StartHistoryImportRequest",
            ""
        ],
        [
            "GetExportedChatInvitesRequest",
            "peer - InputPeer\n\n\n\n\n"
        ],
        [
            "GetExportedChatInviteRequest",
            "peer - InputPeer\n"
        ],
        [
            "EditExportedChatInviteRequest",
            "peer - InputPeer\n\n\n\n\n\n"
        ],
        [
            "DeleteRevokedExportedChatInvitesRequest",
            "peer - InputPeer\n"
        ],
        [
            "DeleteExportedChatInviteRequest",
            "peer - InputPeer\n"
        ],
        [
            "GetAdminsWithInvitesRequest",
            "peer - InputPeer"
        ],
        [
            "GetChatInviteImportersRequest",
            "peer - InputPeer\n\n\n\n\n\n"
        ],
        [
            "SetHistoryTTLRequest",
            ""
        ],
        [
            "ReportProfilePhotoRequest",
            "peer - InputPeer\n\n\n"
        ],
        [
            "ConvertToGigagroupRequest",
            ""
        ],
        [
            "CheckHistoryImportPeerRequest",
            "peer - InputPeer"
        ],
        [
            "ToggleGroupCallRecordRequest",
            "call - InputGroupCall\n\n\n\n"
        ],
        [
            "EditGroupCallParticipantRequest",
            ""
        ],
        [
            "EditGroupCallTitleRequest",
            "call - InputGroupCall\n"
        ],
        [
            "GetGroupCallJoinAsRequest",
            "peer - InputPeer"
        ],
        [
            "ExportGroupCallInviteRequest",
            "call - InputGroupCall\n"
        ],
        [
            "ToggleGroupCallStartSubscriptionRequest",
            "call - InputGroupCall\n"
        ],
        [
            "StartScheduledGroupCallRequest",
            "call - InputGroupCall"
        ],
        [
            "SaveDefaultGroupCallJoinAsRequest",
            "peer - InputPeer\n"
        ],
        [
            "JoinGroupCallPresentationRequest",
            ""
        ],
        [
            "LeaveGroupCallPresentationRequest",
            "call - InputGroupCall"
        ],
        [
            "CheckShortNameRequest",
            ""
        ],
        [
            "SuggestShortNameRequest",
            ""
        ],
        [
            "ResetBotCommandsRequest",
            "scope - BotCommandScope\n"
        ],
        [
            "GetBotCommandsRequest",
            "scope - BotCommandScope\n"
        ],
        [
            "ResetPasswordRequest",
            ""
        ],
        [
            "DeclinePasswordResetRequest",
            ""
        ],
        [
            "CheckRecoveryPasswordRequest",
            ""
        ],
        [
            "GetChatThemesRequest",
            "hash - long"
        ],
        [
            "SetChatThemeRequest",
            ""
        ],
        [
            "ViewSponsoredMessageRequest",
            ""
        ],
        [
            "GetSponsoredMessagesRequest",
            "channel - InputChannel"
        ],
        [
            "GetMessageReadParticipantsRequest",
            "peer - InputPeer\n"
        ],
        [
            "GetSearchResultsCalendarRequest",
            "peer - InputPeer\n\n\n"
        ],
        [
            "GetSearchResultsPositionsRequest",
            "peer - InputPeer\n\n\n"
        ],
        [
            "HideChatJoinRequestRequest",
            "peer - InputPeer\n\n"
        ],
        [
            "HideAllChatJoinRequestsRequest",
            ""
        ],
        [
            "ToggleNoForwardsRequest",
            "peer - InputPeer\n"
        ],
        [
            "SaveDefaultSendAsRequest",
            "peer - InputPeer\n"
        ],
        [
            "GetSendAsRequest",
            "peer - InputPeer"
        ],
        [
            "SetAuthorizationTTLRequest",
            "authorization_ttl_days - int"
        ],
        [
            "ChangeAuthorizationSettingsRequest",
            "hash - long\n\n\n"
        ],
        [
            "DeleteParticipantHistoryRequest",
            "channel - InputChannel\n"
        ],
        [
            "SendReactionRequest",
            "peer - InputPeer\n\n\n\n"
        ],
        [
            "GetMessagesReactionsRequest",
            "peer - InputPeer\n"
        ],
        [
            "GetMessageReactionsListRequest",
            "peer - InputPeer\n\n\n\n"
        ],
        [
            "SetChatAvailableReactionsRequest",
            "peer - InputPeer\n"
        ],
        [
            "GetAvailableReactionsRequest",
            "hash - int"
        ],
        [
            "SetDefaultReactionRequest",
            "reaction - Reaction"
        ],
        [
            "TranslateTextRequest",
            "to_lang - string\n\n\n"
        ],
        [
            "GetUnreadReactionsRequest",
            "peer - InputPeer\n\n\n\n\n\n"
        ],
        [
            "ReadReactionsRequest",
            "peer - InputPeer\n"
        ],
        [
            "ResolvePhoneRequest",
            "phone - string"
        ],
        [
            "GetGroupCallStreamChannelsRequest",
            "call - InputGroupCall"
        ],
        [
            "GetGroupCallStreamRtmpUrlRequest",
            "peer - InputPeer\n"
        ],
        [
            "SearchSentMediaRequest",
            "q - string\n\n"
        ],
        [
            "GetAttachMenuBotsRequest",
            "hash - long"
        ],
        [
            "GetAttachMenuBotRequest",
            "bot - InputUser"
        ],
        [
            "ToggleBotInAttachMenuRequest",
            "bot - InputUser\n\n"
        ],
        [
            "RequestWebViewRequest",
            "peer - InputPeer\n\n\n\n\n\n\n\n\n"
        ],
        [
            "ProlongWebViewRequest",
            "peer - InputPeer\n\n\n\n\n"
        ],
        [
            "RequestSimpleWebViewRequest",
            "bot - InputUser\n\n\n\n\n\n"
        ],
        [
            "SendWebViewResultMessageRequest",
            "bot_query_id - string\n"
        ],
        [
            "SendWebViewDataRequest",
            "bot - InputUser\n\n\n"
        ],
        [
            "SetBotMenuButtonRequest",
            "user_id - InputUser\n"
        ],
        [
            "GetBotMenuButtonRequest",
            "user_id - InputUser"
        ],
        [
            "GetSavedRingtonesRequest",
            "hash - long"
        ],
        [
            "SaveRingtoneRequest",
            "id - InputDocument\n"
        ],
        [
            "UploadRingtoneRequest",
            "file - InputFile\n\n"
        ],
        [
            "SetBotBroadcastDefaultAdminRightsRequest",
            "admin_rights - ChatAdminRights"
        ],
        [
            "SetBotGroupDefaultAdminRightsRequest",
            "admin_rights - ChatAdminRights"
        ],
        [
            "SaveCallLogRequest",
            "peer - InputPhoneCall\n"
        ],
        [
            "ToggleJoinToSendRequest",
            "channel - InputChannel\n"
        ],
        [
            "ToggleJoinRequestRequest",
            "channel - InputChannel\n"
        ],
        [
            "ExportInvoiceRequest",
            "invoice_media - InputMedia"
        ],
        [
            "TranscribeAudioRequest",
            "peer - InputPeer\n"
        ],
        [
            "RateTranscribedAudioRequest",
            "peer - InputPeer\n\n\n"
        ],
        [
            "AssignAppStoreTransactionRequest",
            "receipt - bytes\n"
        ],
        [
            "AssignPlayMarketTransactionRequest",
            "receipt - DataJSON\n"
        ],
        [
            "CanPurchasePremiumRequest",
            "purpose - InputStorePaymentPurpose"
        ],
        [
            "GetPremiumPromoRequest",
            ""
        ],
        [
            "GetCustomEmojiDocumentsRequest",
            "document_id - long"
        ],
        [
            "GetEmojiStickersRequest",
            "hash - long"
        ],
        [
            "GetFeaturedEmojiStickersRequest",
            "hash - long"
        ],
        [
            "UpdateEmojiStatusRequest",
            "emoji_status - EmojiStatus"
        ],
        [
            "GetDefaultEmojiStatusesRequest",
            "hash - long"
        ],
        [
            "GetRecentEmojiStatusesRequest",
            "hash - long"
        ],
        [
            "ClearRecentEmojiStatusesRequest",
            ""
        ],
        [
            "ReportReactionRequest",
            "peer - InputPeer\n\n"
        ],
        [
            "GetTopReactionsRequest",
            "limit - int\n"
        ],
        [
            "GetRecentReactionsRequest",
            "limit - int\n"
        ],
        [
            "ClearRecentReactionsRequest",
            ""
        ],
        [
            "GetExtendedMediaRequest",
            "peer - InputPeer\n"
        ],
        [
            "ImportWebTokenAuthorizationRequest",
            "api_id - int\n\n"
        ],
        [
            "ReorderUsernamesRequest",
            "order - string"
        ],
        [
            "ToggleUsernameRequest",
            "username - string\n"
        ],
        [
            "ReorderUsernamesRequest",
            "channel - InputChannel\n"
        ],
        [
            "ToggleUsernameRequest",
            "channel - InputChannel\n\n"
        ],
        [
            "DeactivateAllUsernamesRequest",
            "channel - InputChannel"
        ],
        [
            "ToggleForumRequest",
            ""
        ],
        [
            "CreateForumTopicRequest",
            "channel - InputChannel\n\n\n\n\n"
        ],
        [
            "GetForumTopicsRequest",
            "channel - InputChannel\n\n\n\n\n"
        ],
        [
            "GetForumTopicsByIDRequest",
            "channel - InputChannel\n"
        ],
        [
            "EditForumTopicRequest",
            "channel - InputChannel\n\n\n\n\n"
        ],
        [
            "UpdatePinnedForumTopicRequest",
            "channel - InputChannel\n\n"
        ],
        [
            "DeleteTopicHistoryRequest",
            "channel - InputChannel\n"
        ],
        [
            "ReorderPinnedForumTopicsRequest",
            "channel - InputChannel\n\n"
        ],
        [
            "ToggleAntiSpamRequest",
            "channel - InputChannel\n"
        ],
        [
            "ReportAntiSpamFalsePositiveRequest",
            "channel - InputChannel\n"
        ],
        [
            "SetDefaultHistoryTTLRequest",
            "period - int"
        ],
        [
            "GetDefaultHistoryTTLRequest",
            ""
        ],
        [
            "ExportContactTokenRequest",
            ""
        ],
        [
            "ImportContactTokenRequest",
            "token - string"
        ],
        [
            "UploadContactProfilePhotoRequest",
            "user_id - InputUser\n\n\n\n\n\n"
        ],
        [
            "ToggleParticipantsHiddenRequest",
            "channel - InputChannel\n"
        ],
        [
            "SendBotRequestedPeerRequest",
            "peer - InputPeer\n\n\n"
        ],
        [
            "GetDefaultProfilePhotoEmojisRequest",
            "hash - long"
        ],
        [
            "GetDefaultGroupPhotoEmojisRequest",
            "hash - long"
        ],
        [
            "RequestFirebaseSmsRequest",
            "phone_number - string\n\n\n"
        ],
        [
            "GetEmojiGroupsRequest",
            "hash - int"
        ],
        [
            "GetEmojiStatusGroupsRequest",
            "hash - int"
        ],
        [
            "GetEmojiProfilePhotoGroupsRequest",
            "hash - int"
        ],
        [
            "SearchCustomEmojiRequest",
            "emoticon - string\n"
        ],
        [
            "TogglePeerTranslationsRequest",
            "peer - InputPeer\n"
        ],
        [
            "GetAutoSaveSettingsRequest",
            ""
        ],
        [
            "SaveAutoSaveSettingsRequest",
            "settings - AutoSaveSettings\n\n\n\n"
        ],
        [
            "DeleteAutoSaveExceptionsRequest",
            ""
        ],
        [
            "ChangeStickerRequest",
            "sticker - InputDocument\n\n\n"
        ],
        [
            "RenameStickerSetRequest",
            "stickerset - InputStickerSet\n"
        ],
        [
            "DeleteStickerSetRequest",
            "stickerset - InputStickerSet"
        ],
        [
            "GetBotAppRequest",
            "app - InputBotApp\n"
        ],
        [
            "RequestAppWebViewRequest",
            "peer - InputPeer\n\n\n\n\n"
        ],
        [
            "SetBotInfoRequest",
            "lang_code - string\n\n\n\n"
        ],
        [
            "GetBotInfoRequest",
            "lang_code - string\n"
        ],
        [
            "ResetLoginEmailRequest",
            "phone_number - string\n"
        ],
        [
            "ExportChatlistInviteRequest",
            "chatlist - InputChatlist\n\n"
        ],
        [
            "DeleteExportedInviteRequest",
            "chatlist - InputChatlist\n"
        ],
        [
            "EditExportedInviteRequest",
            "chatlist - InputChatlist\n\n\n"
        ],
        [
            "GetExportedInvitesRequest",
            "chatlist - InputChatlist"
        ],
        [
            "CheckChatlistInviteRequest",
            "slug - string"
        ],
        [
            "JoinChatlistInviteRequest",
            "slug - string\n"
        ],
        [
            "GetChatlistUpdatesRequest",
            "chatlist - InputChatlist"
        ],
        [
            "JoinChatlistUpdatesRequest",
            "chatlist - InputChatlist\n"
        ],
        [
            "HideChatlistUpdatesRequest",
            "chatlist - InputChatlist"
        ],
        [
            "GetLeaveChatlistSuggestionsRequest",
            "chatlist - InputChatlist"
        ],
        [
            "LeaveChatlistRequest",
            "chatlist - InputChatlist\n"
        ],
        [
            "ReorderUsernamesRequest",
            "bot - InputUser\n"
        ],
        [
            "ToggleUsernameRequest",
            "bot - InputUser\n\n"
        ],
        [
            "SetChatWallPaperRequest",
            "peer - InputPeer\n\n\n"
        ]
    ]
}